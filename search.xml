<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[7.8-项目相关理论问题整理]]></title>
      <url>/2017/07/07/7.8-%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li><p>线程模型：</p>
<ul>
<li>套接字：套接字操作抽象成文件事件</li>
<li>I/O多路复用：监听多个套接字，把文件事件放入队列</li>
<li>文件事件分派：接收并传给相应的事件处理器</li>
<li>事件处理器：处理事件</li>
</ul>
</li>
<li><p>Redis为什么快:</p>
<ul>
<li>绝大部分请求是纯粹的内存操作（非常快速）</li>
<li>采用单线程,避免了不必要的上下文切换和竞争条件</li>
<li>非阻塞IO</li>
</ul>
</li>
<li><p>并发问题：思路可参考《6.14-Redis分布式锁》 </p>
</li>
<li><p>序列化用哪种方式：</p>
<ul>
<li>Json：适用于只有存取操作</li>
<li>Map：对象被缓存期间有对属性的操作</li>
</ul>
</li>
<li><p>缓存穿透：</p>
<ul>
<li>缓存一个存活时期很短的空结果</li>
</ul>
</li>
<li><p>与MySQL的数据一致性</p>
<ul>
<li>并发不高读：读Redis，若没有，读DB，写Redis，若有，直接取得</li>
<li>并发不高写：写DB成功，写Redis</li>
<li>并发高读：读Redis，若没有，读DB，写Redis，若有，直接取得（可以降级成只读Redis）</li>
<li>并发高写：异步写，写入Redis缓存，定时同步到MySQL</li>
</ul>
</li>
</ul>
<h3 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h3><ul>
<li>原理:先进先出的队列，实现消费者和生产者解耦</li>
<li><p>如何保证消息可靠传输：</p>
<ul>
<li>使用failover，配置备用机</li>
</ul>
</li>
<li><p>如何处理消息丢失:</p>
<ul>
<li>确认才消费：使用listener回调函数，在有消息到达时，会调用listener接口的onMessage方法。在这种情况下，在onMessage方法执行完毕后，消息才会被确认，此时只要在方法中抛出异常，该消息就不会被确认</li>
<li>过期的、多次处理失败的消息将会被ActiveMQ置入“ActiveMQ.DLQ”这个队列中</li>
</ul>
</li>
<li><p>配置：</p>
<ul>
<li>randomize=false不使用负载均衡 </li>
<li>jms.prefetchPolicy.all=1消费者每次最多取一条信息</li>
<li>initialReconnectDelay=500重连等待</li>
<li>maxReconnectAttempts=60最大重连尝试数</li>
<li>priorityBackup=true主机恢复后使用主机</li>
</ul>
</li>
</ul>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul>
<li>AQS实现原理</li>
<li>segement锁如何实现：<ul>
<li>Segment类继承于ReentrantLock类</li>
<li>每个Segment对象包含一个volatile的计数器</li>
<li>Segment中volatile的HashEntry<k,v>数组table负责整个ConcurrentHashMap包含桶总数的一部分（默认为1/16）</k,v></li>
</ul>
</li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li>主从同步延迟：<ul>
<li>原理：主库对所有DDL和 DML产生顺序的binlog，从库用Slave_IO_Running到从库取日志，用单线程Slave_SQL_Running执行</li>
<li>原因：主库TPS并发较高，DDL数量超过从库一个线程所能承受的范围；产生锁等待</li>
<li>解决方案：从库硬件升级；降低从库安全设置，关闭binlog等</li>
</ul>
</li>
</ul>
<h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ul>
<li><p>原理：</p>
<ul>
<li>XML文件加载到内存中会生成一个对应的MappedStatement对象，以Key-Value形式存储在Configuration的Map中</li>
<li>创建SqlSession开启数据库访问</li>
<li>传递SQL语句的StatementId和参数</li>
<li>根据StatementId找到MappedStatement（包含SQLSource和ResultMap）</li>
<li>Exector执行，完成SQL语句动态解析，生成BoundSQL，提供给StatementHandler</li>
<li>创建JDBC的Statement，传递给StatementHandler</li>
<li>StatementHandler填充参数，执行并返回List</li>
</ul>
</li>
<li><p>与数据库交互方式：</p>
<ul>
<li>Mybatis提供的API：创建一个和数据库打交道的SqlSession对象，根据StatementId和参数来操作数据库</li>
<li>Mapper接口：通过SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理实现生成Mapper实例，底层仍然通过API调用</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[7.6-安全与拦截器]]></title>
      <url>/2017/07/06/7.6-%E5%AE%89%E5%85%A8%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、处理信息安全问题："><a href="#一、处理信息安全问题：" class="headerlink" title="一、处理信息安全问题："></a>一、处理信息安全问题：</h3><blockquote>
<p>CSRF跨站请求伪造：伪装来自受信用户的请求来利用受信网站</p>
</blockquote>
<ul>
<li>特性：利用网站对用户标识的信任,依靠用户标识危害网站</li>
<li>做法：欺骗用户的浏览器发送HTTP请求给目标站点</li>
<li>实现：可以通过IMG标签触发GET请求，利用它来实现CSRF攻击</li>
<li>防范（可使用拦截器实现）：<ul>
<li>增加隐藏token，提交请求时验证token（Cookie中不存在）</li>
<li>项目中使用的：验证HTTP请求的Referer字段是否为正常的字段</li>
</ul>
</li>
</ul>
<blockquote>
<p>CSS跨站脚本：利用站点内的可信用户</p>
</blockquote>
<ul>
<li>做法：输入js脚本，点击页面时会执行</li>
<li>防范：<ul>
<li>form表单添加<code>&lt;spring:htmlEscape defaultHtmlEscape=&quot;true&quot; /&gt;</code></li>
<li>手动escape</li>
<li>后台加过滤器</li>
</ul>
</li>
</ul>
<h3 id="二、上下文信息获取"><a href="#二、上下文信息获取" class="headerlink" title="二、上下文信息获取"></a>二、上下文信息获取</h3><ul>
<li>对所有URL添加统一拦截器，获取ControllerContext</li>
<li>ControllerContext上下文中包含一系列信息，包括从登陆Ticket获取的信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[7.5-正则表达式]]></title>
      <url>/2017/07/05/7.5-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="一、相应需求：要求input中输入的必须是-开头的地址"><a href="#一、相应需求：要求input中输入的必须是-开头的地址" class="headerlink" title="一、相应需求：要求input中输入的必须是//开头的地址"></a>一、相应需求：要求input中输入的必须是//开头的地址</h3><ul>
<li>正则表达式：</li>
<li><code>/^([hH][tT]{2}[pP]:\\/\\/|[hH][tT]{2}[pP][sS]:\\/\\/|\\/\\/)+/</code></li>
<li>解析：<ul>
<li><code>/^</code>：匹配字符串开始位置</li>
<li><code>[hH][tT]{2}[pP]</code>：大小写不敏感匹配<code>http</code></li>
<li><code>[hH][tT]{2}[pP][sS]</code>：大小写不敏感匹配<code>https</code></li>
<li><code>\\/\\/</code>：匹配<code>/</code></li>
</ul>
</li>
</ul>
<h3 id="二、-正则表达式学习"><a href="#二、-正则表达式学习" class="headerlink" title="二、 正则表达式学习"></a>二、 正则表达式学习</h3><ul>
<li><p>限定符：</p>
<ul>
<li><code>*</code>：前面的子表达式0到多次 {0,} </li>
<li><code>+</code>：前面的子表达式1到多次 {1,}</li>
<li><code>?</code>：前面的子表达式0到1次  {0,1} ——非贪婪或最小匹配</li>
<li><code>{n}</code>：前面的子表达式n次</li>
</ul>
</li>
<li><p>一些元字符：</p>
<ul>
<li><code>\b</code>：匹配单词边界（结尾部分）</li>
<li><code>\B</code>：匹配非单词边界（结尾部分）</li>
<li><code>\d</code>：匹配一个数字字符</li>
<li><code>\D</code>：匹配一个非数字字符</li>
<li><code>\n</code>：匹配换行符</li>
<li><code>\r</code>：匹配回车符</li>
<li><code>\w</code>：匹配包括下划线的任意字符</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[7.4-高可用、高伸缩系统]]></title>
      <url>/2017/07/04/7.4-%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E5%8F%AF%E4%BC%B8%E7%BC%A9%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>本文为《分布式Java应用与实践》笔记。</p>
<h3 id="一、负载均衡机器选择"><a href="#一、负载均衡机器选择" class="headerlink" title="一、负载均衡机器选择"></a>一、负载均衡机器选择</h3><ul>
<li>随机选择</li>
<li>Hash选择：静态页面加载，常见用于静态图片加载</li>
<li>Round-Robin：根据地址列表按顺序选择</li>
<li>按权重选择：静态权重和动态权重</li>
<li>按负载选择：需要搜集负载状况，实际较少使用</li>
<li>按连接选择：按连接数多少分配，但新开机器问题大</li>
<li>unicorn策略：所有顾客到一个收银台排队，收银员处理完毕后亮灯通知</li>
</ul>
<h3 id="二、-2PC保证一致性"><a href="#二、-2PC保证一致性" class="headerlink" title="二、 2PC保证一致性"></a>二、 2PC保证一致性</h3><ul>
<li><p>基本流程：</p>
<ul>
<li>开启事务</li>
<li>通知master执行（写入undo和redo）</li>
<li>如有一个master反馈不能执行，则回滚（rollback）</li>
<li>通知所有master完成操作（commit）</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>同步阻塞问题 </li>
<li>协调者单点故障</li>
<li>数据不一致（commit请求发送，有些没收到）</li>
<li>协调者和唯一参与者全部宕机，事务永远不确定状态</li>
</ul>
</li>
</ul>
<h3 id="三、-3PC保证一致性"><a href="#三、-3PC保证一致性" class="headerlink" title="三、 3PC保证一致性"></a>三、 3PC保证一致性</h3><ul>
<li>在2PC基础上增加了preCommit阶段，canCommit，doCommit</li>
<li>master收到preCommit之后继续等doCommit或者等一段时间后提交</li>
<li>优缺点：<ul>
<li>超时执行减少了对资源的阻塞 </li>
<li>同时产生一定的数据一致性问题，例如abort没有及时到达</li>
</ul>
</li>
</ul>
<h3 id="四、-尽可能避免错误"><a href="#四、-尽可能避免错误" class="headerlink" title="四、 尽可能避免错误"></a>四、 尽可能避免错误</h3><ul>
<li>设计可容错的系统：一是Fail Fast原则，有错误的时候立刻中断流程，避免无谓操作，二是保证接口和对象设计的严谨性</li>
<li>设计具有自我保护能力的系统：警惕所有第三方调用，设计缓存等</li>
<li><p>限制使用资源：</p>
<ul>
<li>避免过大的HashMap等集合</li>
<li>注意释放不再引用的对象（ThreadLocal的set(null)方法）</li>
</ul>
</li>
<li><p>限制日志文件的使用</p>
</li>
<li>限制网络资源：使用连接池；保留操作系统资源</li>
<li>限制线程的使用：选择合适的线程池</li>
</ul>
<h3 id="五、-垂直伸缩"><a href="#五、-垂直伸缩" class="headerlink" title="五、 垂直伸缩"></a>五、 垂直伸缩</h3><ul>
<li><p>增加CPU后得不到改善的情况：</p>
<ul>
<li>单线程任务：考虑并行分解任务，SUN的Fork/Join</li>
<li>锁竞争激烈：尽可能降低锁竞争的部分</li>
<li>支撑并发请求的线程数固定：根据CPU数量计算合理的线程数</li>
</ul>
</li>
<li><p>增加内存后得不到改善的情况：</p>
<ul>
<li>cache集合大小固定：根据可用内存大小计算</li>
<li>JVM堆内存固定：需要进行相应调整</li>
</ul>
</li>
<li><p>支撑大数据量：</p>
<ul>
<li>分库：访问分散，数据库关联查询增加</li>
<li>分表：单张表数据减少，但开发复杂（DAL），分页较为麻烦</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[7.3-AsyncConfigurer与JDK包中线程池]]></title>
      <url>/2017/07/03/7.3-AsyncConfigurer%E4%B8%8EJDK%E5%8C%85%E4%B8%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="1-Async异步方法线程池配置"><a href="#1-Async异步方法线程池配置" class="headerlink" title="1. Async异步方法线程池配置"></a>1. Async异步方法线程池配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">    <span class="comment">//参数配置</span></div><div class="line">    executor.setCorePoolSize(<span class="number">10</span>);</div><div class="line">    executor.setMaxPoolSize(<span class="number">300</span>);</div><div class="line">    executor.setQueueCapacity(<span class="number">500</span>);</div><div class="line">    executor.setThreadPriority(Thread.NORM_PRIORITY);</div><div class="line">    executor.setThreadNamePrefix(<span class="string">"customerAsyncExecutor-"</span>);</div><div class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line">    executor.initialize();</div><div class="line">    <span class="keyword">return</span> executor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-ThreadPoolTaskExecutor类"><a href="#2-ThreadPoolTaskExecutor类" class="headerlink" title="2. ThreadPoolTaskExecutor类"></a>2. ThreadPoolTaskExecutor类</h3><ul>
<li><p>参数：</p>
<ul>
<li>poolSizeMonitor：用于加锁</li>
<li>corePoolSize</li>
<li>maxPoolSize</li>
<li>keepAliveSeconds</li>
<li>queueCapacity</li>
<li>allowCoreThreadTimeOut</li>
<li>threadPoolExecutor：真正的线程池</li>
</ul>
</li>
<li><p>参数的get/set方法都加了synchronized关键字，锁住了poolSizeMonitor对象</p>
</li>
<li>队列：传入参数大于0，则为LinkedBlockingQueue，否则使用SynchronousQueue，都强制类型转换成BlockingQueue</li>
<li>继承了ExecutorConfigurationSupport类</li>
</ul>
<h3 id="3-java-util包中的threadPoolExecutor类"><a href="#3-java-util包中的threadPoolExecutor类" class="headerlink" title="3. java.util包中的threadPoolExecutor类"></a>3. java.util包中的threadPoolExecutor类</h3><ul>
<li><p>线程Size：</p>
<ul>
<li>线程数小于corePoolSize，直接新建线程</li>
<li>大于corePoolSize，小于maximumPoolSize，队列满时才新建线程</li>
<li>prestartCoreThread方法：预先创建线程</li>
</ul>
</li>
<li><p>ThreadPoolFactory创建线程：可修改线程组名称，优先级等</p>
</li>
<li>Keep-alive：线程数大于corePoolSize，等候超过一定时间后中断线程</li>
<li><p>队列Queue：</p>
<ul>
<li>SynchronousQueue：无缓冲队列，生产者直到消费者就位才执行，可以避免任务线程互相等待的情况。一般要求maximumPoolSize设置越大越好</li>
<li>LinkedBlockingQueue：无界队列，不会有超过corePoolSize数量的线程。适用于线程完全独立的情况，处理瞬态突发请求，Web服务器中常用</li>
<li>ArrayBlockingQueue：有界队列，可以控制系统资源消耗，但是需要在队列长度和线程数之间做平衡</li>
</ul>
</li>
<li><p>拒绝策略Policy：</p>
<ul>
<li>AbortPolicy：抛RejectedExecutionException异常</li>
<li>CallerRunsPolicy：提供简单的反馈控制机制，能够减缓新任务的提交速度</li>
<li>DiscardPolicy：直接drop任务</li>
<li>DiscardOldestPolicy：删除队列头部的任务，重试</li>
</ul>
</li>
<li><p>Hook方法：</p>
<ul>
<li>beforeExecute：初始化ThreadLocal，添加Log信息等</li>
<li>afterExecute：统计数据，收尾处理等</li>
</ul>
</li>
<li><p>ctl：为了包装workerCount和runState为一个int，限制任务线程数量为(2^29)-1，大约500百万个线程。后两位保存线程状态</p>
</li>
<li><p>线程池状态：</p>
<ul>
<li>RUNNING:接受新的任务，处理队列任务；</li>
<li>SHUTDOWN：不在接受新的任务，处理队列任务； </li>
<li>STOP：不在接受新任务，不处理队列任务，中断正在执行的任务线程； </li>
<li>TIDYING：所有的任务已经结束，任务线程为0，线程转换到TIDYING； </li>
<li>TERMINATED：线程池已将结束，即terminated()方法执行完。 </li>
</ul>
</li>
<li><p>参数：所有用于控制参数被修饰为volatile，以便正在进行的操作都是基于最新值。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.30-大型网站技术架构学习]]></title>
      <url>/2017/06/30/6.30-%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、书籍信息"><a href="#一、书籍信息" class="headerlink" title="一、书籍信息"></a>一、书籍信息</h3><p>《大型网站技术架构核心原理与案例分析》</p>
<h3 id="二、大型网站软件系统特点："><a href="#二、大型网站软件系统特点：" class="headerlink" title="二、大型网站软件系统特点："></a>二、大型网站软件系统特点：</h3><ul>
<li>高并发，大流量</li>
<li>高可用</li>
<li>海量数据</li>
<li>用户分布广泛，网络情况复杂</li>
<li>安全环境恶劣</li>
<li>需求快速变更，发布频繁</li>
</ul>
<h3 id="三、网站架构渐进式发展"><a href="#三、网站架构渐进式发展" class="headerlink" title="三、网站架构渐进式发展"></a>三、网站架构渐进式发展</h3><ul>
<li><p>网站架构演进：</p>
<ul>
<li>初始网站架构（应用程序、文件、数据库在同一服务器上，如租用的阿里云服务器）</li>
<li>应用服务器（CPU）、数据库服务器（内存）、文件服务器分离（硬盘）</li>
<li>使用缓存减少数据库访问压力</li>
<li>使用负载均衡调度和集群减少应用服务器压力</li>
<li>数据库读写分离</li>
<li>CDN和反向代理</li>
<li>分布式文件系统和分布式数据库</li>
<li>noSQL和搜索引擎</li>
<li>业务拆分</li>
</ul>
</li>
<li><p>网站架构模式：</p>
<ul>
<li>分层：应用层、服务层、数据层</li>
<li>分割：高内聚低耦合</li>
<li>分布式：必须调用网络、宕机概率大、数据一致性保持</li>
<li>集群：多台服务器部署相同应用</li>
<li>缓存：CDN/反向代理/本地缓存/分布式缓存（数据访问热点不均衡、数据不会很快过期）</li>
<li>异步：消息队列（可以缓解高峰）</li>
<li>冗余：数据备份</li>
<li>安全：密码、验证码、访问控制等</li>
</ul>
</li>
<li><p>大型网站核心架构要素：</p>
<ul>
<li>性能：响应时间、TPS等要素</li>
<li>可用性：99.99%</li>
<li>伸缩性：体现在集群中服务器的添加</li>
<li>扩展性：事件驱动架构（消息队列）和分布式服务</li>
<li>安全性</li>
</ul>
</li>
<li><p>Web前端性能优化：</p>
<ul>
<li>浏览器访问优化：</li>
<li>减少HTTP请求（将js、css等文件合并）</li>
<li>使用浏览器缓存</li>
<li>启用压缩（如Gzip）</li>
<li>CSS放在页面最上面、JS放在最下面（下载完全部CSS再进行渲染）</li>
<li>减少Cookie传输</li>
<li>CDN加速：本质仍然是缓存，缓存静态资源</li>
<li>反向代理：位于机房、代理Web服务器接收HTTP请求，可以实现负载均衡和缓存功能</li>
</ul>
</li>
<li><p>应用服务器性能优化：</p>
<ul>
<li>分布式缓存</li>
<li>考虑数据是否频繁修改、是否非热点、是否容忍数据不一致和脏读、缓存可用性如何</li>
<li>缓存预热：加载一些重要的元信息</li>
<li>缓存穿透：将不存在的数据缓存起来</li>
<li>分布式缓存架构（需要更新同步的JBoss和不互相通信的Memcached）Memcached优点很多</li>
</ul>
</li>
<li><p>代码优化：</p>
<ul>
<li>多线程</li>
<li>资源复用：单例模式和对象池（数据库连接池、线程池）</li>
<li>数据结构</li>
<li>垃圾回收</li>
</ul>
</li>
<li><p>存储性能优化：</p>
<ul>
<li>使用SSD</li>
<li>B+树还是LSM树</li>
<li>RAID和HDFS（默认同一个数据有三个副本）</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.29-Java并发包]]></title>
      <url>/2017/06/29/6.29-Java%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>本文为《分布式Java应用于实践》笔记。</p>
<h2 id="一、集合包"><a href="#一、集合包" class="headerlink" title="一、集合包"></a>一、集合包</h2><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1. ArrayList"></a>1. ArrayList</h3><ul>
<li>默认构造为实例化一个Object类型的数组</li>
<li>add时数组已满：Arrays.copyOf</li>
<li>add插入指定位置：index后对象逐个往后复制</li>
<li>remove删除：对象非null则使用equals，删除使用fastRemove方法，将index后对象逐个往前复制</li>
<li>iterator遍历：先比较创建时的modCount与现有modCount，如不同抛出异常，相同则用get获取</li>
<li>contains：通过遍历实现</li>
</ul>
<h3 id="2-LinkedArrayList"><a href="#2-LinkedArrayList" class="headerlink" title="2. LinkedArrayList"></a>2. LinkedArrayList</h3><ul>
<li>基于双向链表实现：先生成Entry赋值给header，然后header的pre与next指向自身，形成闭环</li>
<li>add：创建Entry对象，next指向header，pre指向header的pre</li>
<li>get：选择从头开始遍历还是从未到头遍历</li>
<li>iterator遍历：可以调用hasPrevious</li>
<li>contains：通过遍历实现</li>
</ul>
<h3 id="3-Vector"><a href="#3-Vector" class="headerlink" title="3. Vector"></a>3. Vector</h3><ul>
<li>容量策略更可控：基于capacityIncrement</li>
<li>线程安全：add，remove，get等加上了synchronized关键字</li>
</ul>
<h3 id="4-Stack"><a href="#4-Stack" class="headerlink" title="4. Stack"></a>4. Stack</h3><ul>
<li>基于Vector实现</li>
<li>peek方法：先获取数组大小，再获取最后一个元素</li>
</ul>
<h3 id="5-HashSet"><a href="#5-HashSet" class="headerlink" title="5. HashSet"></a>5. HashSet</h3><ul>
<li>基于HashMap实现</li>
<li>不支持get方法获取指定位置元素</li>
</ul>
<h3 id="6-TreeSet"><a href="#6-TreeSet" class="headerlink" title="6. TreeSet"></a>6. TreeSet</h3><ul>
<li>支持排序，传入Comparator</li>
</ul>
<h3 id="7-HashMap"><a href="#7-HashMap" class="headerlink" title="7. HashMap"></a>7. HashMap</h3><ul>
<li>put：如果key为null，基于Entry的next方法遍历查找；如果不为null，先取得key的HashCode，然后做Hash操作，再与Entry数组-1的值按位与得到位置</li>
<li>哈希冲突：不同的key找到相同的存储位置——链地址法。</li>
<li>get：寻找hash值相等，且key满足equals的Entry</li>
</ul>
<h3 id="8-TreeMap"><a href="#8-TreeMap" class="headerlink" title="8. TreeMap"></a>8. TreeMap</h3><ul>
<li>put：基于红黑树实现，必须要有key比较的方法</li>
<li>先判断root是否为null，如是则创建一个Entry赋值给root，然后根据Comparator基于红黑树遍历</li>
</ul>
<h2 id="二、并发包"><a href="#二、并发包" class="headerlink" title="二、并发包"></a>二、并发包</h2><h3 id="1-ConcurrentHashMap"><a href="#1-ConcurrentHashMap" class="headerlink" title="1. ConcurrentHashMap"></a>1. ConcurrentHashMap</h3><ul>
<li>put：根据Hash值计算并获取Segment对象，先进行lock操作，判断是否扩容，然后进行与HashMap基本相同的操作，完成之后释放锁</li>
<li>默认分为16段，各自都持有锁</li>
<li>get：读数据时，仅在value为null时才加锁</li>
<li>实现读取不加锁：HashEntry对象数组对应的变量是volatile的，hash、key以及next属性都是final的</li>
<li>size：不加锁情况下遍历所有段，读取volatile的count和modCount，统计完毕后再遍历，比较modCount是否有改变。如果执行三次还有问题，那么分段加锁计算</li>
</ul>
<h3 id="2-CopyOnWriteArrayList"><a href="#2-CopyOnWriteArrayList" class="headerlink" title="2. CopyOnWriteArrayList"></a>2. CopyOnWriteArrayList</h3><ul>
<li>add：使用ReetrantLock保证线程安全，每次都创建一个新的Object数组，将新增加的对象放入数组末尾后，引用切换</li>
<li>remove：创建一个比当前数组小1的数组，没有使用Arrays.copyOf</li>
<li>get：没有加锁保护，可能读脏数据</li>
<li>iterator：仅对快照数组进行遍历</li>
<li>小结：增删性能较差</li>
</ul>
<h3 id="3-ArrayBlockingQueue"><a href="#3-ArrayBlockingQueue" class="headerlink" title="3. ArrayBlockingQueue"></a>3. ArrayBlockingQueue</h3><ul>
<li>构造器：传入参数即为初始化数组的大小，同时初始化锁和两个Condition，notEmpty和notFull</li>
<li>offer：插入时加锁，如数组已满，进入等待。如等待超时，返回false，未超时则调用notFull条件的await进行等待，唤醒后继续判断数组是否已满。</li>
<li>poll：调用notEMpty条件的await进行等待</li>
<li>iterator：调用next方法时先进行加锁</li>
</ul>
<h3 id="4-LinkedBlockingQueue"><a href="#4-LinkedBlockingQueue" class="headerlink" title="4. LinkedBlockingQueue"></a>4. LinkedBlockingQueue</h3><ul>
<li>put/offer一把锁，take/poll一把锁，避免读写时相互竞争锁</li>
</ul>
<h3 id="5-Atomic原子类"><a href="#5-Atomic原子类" class="headerlink" title="5. Atomic原子类"></a>5. Atomic原子类</h3><ul>
<li>incrementAndGet：关键方法为compareAndSet，调用unsafe的compareAndSwapInt方法（native方法），基于CPU的CAS元语实现</li>
</ul>
<h3 id="6-ThreadPoolExecutor"><a href="#6-ThreadPoolExecutor" class="headerlink" title="6. ThreadPoolExecutor"></a>6. ThreadPoolExecutor</h3><ul>
<li><p>execute：如当前线程数小于corePoolSize，调用addIfUnderCorePoolSize方法：</p>
<ul>
<li>先对mainLock加锁</li>
<li>然后addThread增加线程</li>
<li>addThread方法创建Worker对象，调用threadFactory创建线程，放入Workers中</li>
<li>增加线程数，释放mainLock，完成方法执行</li>
</ul>
</li>
<li><p>启动新线程执行Runnable任务，Worker的Run方法先执行Runnable任务，执行完毕后Task后，通过WorkQueue的poll或者take方法获取新的Task</p>
</li>
<li>线程池配置：<ul>
<li>高性能：SynchronousQueue作为任务缓冲队列，不在队列缓冲，直接开线程执行</li>
<li>缓冲执行：使用LinkedBlockingQueue，可以使Runnable任务尽量被corePoolSize范围的线程执行掉</li>
</ul>
</li>
</ul>
<h3 id="7-Executors"><a href="#7-Executors" class="headerlink" title="7. Executors"></a>7. Executors</h3><ul>
<li>newFixedThreadPool(int):固定大小线程池</li>
<li>newSingleThreadExecutor：单线程执行线程池</li>
<li>newCachedThreadPool：缓存队列使用SynchronousQueue，直到启动线程数量达到整形最大值，报异常</li>
<li>newScheduledThreadPool</li>
</ul>
<h3 id="8-FutureTask"><a href="#8-FutureTask" class="headerlink" title="8. FutureTask"></a>8. FutureTask</h3><ul>
<li>run：调用Sync的innerRun方法实现，基于CAS将state从0设置为RUNNING。获取当前线程，如果是RUNNING，调用innerSet，首先获取STATE，如果是RAN（已经执行）则返回，CANCELLED则调用releaseShared，最后将runner属性设置为null</li>
<li>get：若STATE为RAN或者CANCELLED且runner为null，则进入后续步骤，否则等待。后续无异常，则返回result</li>
<li>cancel：调用Sync的innerCancel，基于CAS将state设置为CANCELLED</li>
</ul>
<h3 id="9-其他并发工具"><a href="#9-其他并发工具" class="headerlink" title="9. 其他并发工具"></a>9. 其他并发工具</h3><ul>
<li>Semaphore信号量：通过CAS操作减，返回剩余个数大于0则完成tryAcquire</li>
<li>CountDownLatch：减计数到0后才执行</li>
<li>CyclicBarrier：与CountDownLatch相反，增加到一定计数后执行</li>
<li>ReetrantLock：CAS操作，可重入。如果未获得锁，则用unsafe.park()方法挂起</li>
<li>ReetrantReadWriteLock：升级降级机制：<ul>
<li>持有读锁后，不能直接加写锁的lock，“读锁不可升级”</li>
<li>持有写锁，可调用读锁的lock，写锁unlock后，当前锁降级为读锁</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.28-微服务与SOA]]></title>
      <url>/2017/06/28/6.28-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8ESOA/</url>
      <content type="html"><![CDATA[<h3 id="一、微服务特点（整理自知乎）"><a href="#一、微服务特点（整理自知乎）" class="headerlink" title="一、微服务特点（整理自知乎）"></a>一、微服务特点（整理自知乎）</h3><ul>
<li>不同的子系统采用自己的架构，各个服务运行自己的Web容器中。当需要增加计算能力的时候，只需要增加这个子系统或服务的实例就好了，当升级的时候，可以不影响别的子系统。</li>
<li>微服务与SOA相比，更强调分布式系统的特性，比如横向伸缩性，服务发现，负载均衡，故障转移，高可用。</li>
<li>互联网开发对服务治理提出了更多的要求，比如多版本，比如灰度升级，比如服务降级，比如分布式跟踪，这些都是在SOA实践中重视不够的。</li>
<li>Docker容器为微服务提供了更便利的条件，每个服务可以通过SpringBoot技术跑在自己的进程中。可能在几十台计算机中运行成千上万个Docker容器，每个容器都运行着服务的一个实例。</li>
</ul>
<h3 id="二、分布式Java应用"><a href="#二、分布式Java应用" class="headerlink" title="二、分布式Java应用"></a>二、分布式Java应用</h3><h3 id="1-分布式带来的挑战："><a href="#1-分布式带来的挑战：" class="headerlink" title="1. 分布式带来的挑战："></a>1. 分布式带来的挑战：</h3><ul>
<li>服务多级调用的延迟</li>
<li>调试、bug跟踪困难</li>
<li>安全监测需要有统一平台</li>
<li>高可用和可伸缩</li>
<li>多版本和依赖管理</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.27-MySQL优化]]></title>
      <url>/2017/06/27/6.27-MySQL%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="一、-库表优化"><a href="#一、-库表优化" class="headerlink" title="一、 库表优化"></a>一、 库表优化</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><ul>
<li><p>类型选择原则：</p>
<ul>
<li>更小的通常更好，但要确保没有低估</li>
<li>尽可能使用简单数据类型（ip用整型）</li>
<li>尽可能不使用null</li>
</ul>
</li>
<li><p>浮点类型：</p>
<ul>
<li>DECIMAL存储精确的小数</li>
<li>FLOAT和DOUBLE使用更少空间</li>
<li>对于需要高精度的财务类数据，可以乘以一定倍数后采用BIGINT计算，避免浮点数计算不精确和DECIMAL计算代价过高的问题</li>
</ul>
</li>
<li><p>字符串类型：</p>
<ul>
<li>VARCHAR：可变长字符串，使用额外字节记录长度，适用于UTF-8数据集</li>
<li>CHAR：定长，存储密码的md5值</li>
<li>BLOB/TEXT：BLOB存储二进制大数据，TEXT类型有排序规则</li>
<li>ENUM：枚举类型，两个ENUM列关联速度很快</li>
</ul>
</li>
<li><p>时间类型：</p>
<ul>
<li>DATETIME：使用8字节存储空间，将日期和时间装到格式为YYYYMMDDHHMMSS的整数中</li>
<li>TIMESTAMP：使用4字节存储空间，显示的值依赖于时区</li>
</ul>
</li>
</ul>
<h3 id="2-范式"><a href="#2-范式" class="headerlink" title="2. 范式"></a>2. 范式</h3><ul>
<li><p>优点和缺点：</p>
<ul>
<li>范式化的表一般比较小，更新操作快</li>
<li>重复数据少，更少需要DISTINCT和GROUP BY语句</li>
<li>缺点是通常需要关联</li>
</ul>
</li>
<li><p>混用反范式化和范式化：</p>
<ul>
<li>新增一列作为缓存并建立索引，加快排序</li>
<li>缓存衍生，如论坛中记录发帖数</li>
</ul>
</li>
<li><p>缓存表和汇总表：</p>
<ul>
<li>缓存表：可以较简单从其他表获得的数据</li>
<li>汇总表：保存GROUP BY语句聚合数据的表</li>
</ul>
</li>
</ul>
<h2 id="二、索引优化（存储引擎层）"><a href="#二、索引优化（存储引擎层）" class="headerlink" title="二、索引优化（存储引擎层）"></a>二、索引优化（存储引擎层）</h2><h3 id="1-索引类型"><a href="#1-索引类型" class="headerlink" title="1. 索引类型"></a>1. 索引类型</h3><ul>
<li><p>B-Tree：</p>
<ul>
<li>MyISAM通过数据的物理位置引用被索引的行</li>
<li>InnoDB根据主键引用被索引的行</li>
<li>存储引擎不再需要进行全表扫描，取而代之是从索引的根节点开始进行搜索</li>
</ul>
</li>
<li><p>B-Tree索引查询类型：</p>
<ul>
<li>全值匹配：和索引中所有列进行匹配</li>
<li>匹配最左前缀：索引从左开始的x列匹配</li>
<li>匹配列前缀：只匹配某一列值的开头部分</li>
<li>匹配范围值</li>
<li>精确匹配某一列，范围匹配另一列</li>
<li>只访问索引的查询</li>
</ul>
</li>
<li><p>B-Tree索引查询限制：</p>
<ul>
<li>最左开始，无法跳过中间的列(最左前缀)</li>
<li>如果查询中对某列进行了范围查询，则其右边的所有列都无法使用索引优化查找</li>
</ul>
</li>
<li><p>哈希索引：</p>
<ul>
<li>只包含行指针+哈希值，不包含数据</li>
<li>不按照索引值顺序存储，无法用于排序</li>
<li>不支持部分索引列匹配查找，必须使用全部</li>
<li>不支持范围查询</li>
<li>InnoDB的自适应哈希索引（一种优化）</li>
</ul>
</li>
</ul>
<h3 id="2-索引策略"><a href="#2-索引策略" class="headerlink" title="2. 索引策略"></a>2. 索引策略</h3><ul>
<li><p>索引的优点：</p>
<ul>
<li>索引可以大大减少数据库表的扫描量</li>
<li>索引可以帮助服务器避免排序和临时表</li>
<li>索引可以将随机I/O变成顺序I/O</li>
</ul>
</li>
<li><p>索引失效：</p>
<ul>
<li>索引不能是表达式的一部分</li>
<li>索引不能是函数的参数</li>
</ul>
</li>
<li><p>索引选择：</p>
<ul>
<li>前缀索引：使得索引更小，更快，但是无法做GROUP BY和ORDER BY操作，也无法覆盖扫描</li>
<li>索引列顺序：经验法则是将选择性最高的放在最前面</li>
</ul>
</li>
<li><p>聚簇索引：实际上是一种数据的存储方式</p>
<ul>
<li>数据航存放在索引的叶子结点，且数据行和相邻的键值紧凑地存放在一起</li>
<li><p>优点：</p>
<ul>
<li>可以将相关数据保存在一起，减少磁盘I/O</li>
<li>索引和数据保存在一个B-Tree，数据访问更快</li>
<li>使用覆盖索引的扫描时可以直接使用主键</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>插入速度依赖于插入顺序，最好是按照主键顺序插入</li>
<li>更新列代价很高</li>
<li>插入行可能导致页分裂</li>
</ul>
</li>
</ul>
</li>
<li><p>InnoDB和MyISAM的索引：</p>
<ul>
<li>MyISAM索引中的叶子结点包含了行号</li>
<li>InnoDB的聚簇索引，叶子结点包含主键，事务ID，回滚指针和所有剩余列</li>
<li>InnoDB的二级索引存储的是主键值，不是行指针</li>
</ul>
</li>
</ul>
<h2 id="三、-查询优化"><a href="#三、-查询优化" class="headerlink" title="三、 查询优化"></a>三、 查询优化</h2><h3 id="1-优化数据访问"><a href="#1-优化数据访问" class="headerlink" title="1. 优化数据访问"></a>1. 优化数据访问</h3><ul>
<li>避免查询不需要的记录：添加limit</li>
<li>避免多表查询查询所有列：不使用select *</li>
<li>重复查询相同数据：采用缓存即可</li>
</ul>
<h3 id="2-从好到坏的where条件应用"><a href="#2-从好到坏的where条件应用" class="headerlink" title="2. 从好到坏的where条件应用"></a>2. 从好到坏的where条件应用</h3><ul>
<li>最佳：存储引擎层在索引中使用where过滤不匹配的记录</li>
<li>次佳：使用索引覆盖扫描，直接从索引中过滤不需要的记录并返回，在服务器层完成</li>
<li>最次：先从数据表中返回数据，然后过滤，需要回表查询</li>
</ul>
<h3 id="3-重构查询"><a href="#3-重构查询" class="headerlink" title="3. 重构查询"></a>3. 重构查询</h3><ul>
<li>一个复杂查询改为多个简单查询</li>
<li>对大查询分而治之，减少锁持有的时间：例如删除过期记录，每次LIMIT 10000</li>
<li>分解关联查询：常见使用IN方式替代<ul>
<li>让缓存效率更高</li>
<li>减少锁的竞争</li>
<li>应用层关联便于表的拆分</li>
<li>减少冗余记录查询</li>
</ul>
</li>
</ul>
<h3 id="4-特定类型优化"><a href="#4-特定类型优化" class="headerlink" title="4. 特定类型优化"></a>4. 特定类型优化</h3><ul>
<li><p>COUNT()查询：</p>
<ul>
<li>COUNT(*)统计结果集</li>
<li>COUNT(列名)统计列的非空值的数量<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(color=<span class="string">'blue'</span> <span class="keyword">OR</span> <span class="literal">NULL</span>) <span class="keyword">as</span> blue,</div><div class="line"><span class="keyword">count</span>(color=<span class="string">'red'</span> <span class="keyword">OR</span> <span class="literal">NULL</span>) <span class="keyword">as</span> red <span class="keyword">from</span> items;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>优化关联查询：</p>
<ul>
<li>确保ON或者USING的列上有索引，其中两表关联，只需要在第二个表的相应列创建索引</li>
<li>确保GROUP BY或者ORDER BY只涉及一个表中的列</li>
</ul>
</li>
<li><p>优化LIMIT分页：使用索引覆盖扫描，然后再进行关联</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.26-MySQL基础]]></title>
      <url>/2017/06/26/6.26-MySQL%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="一、MySQL架构"><a href="#一、MySQL架构" class="headerlink" title="一、MySQL架构"></a>一、MySQL架构</h2><h3 id="1-并发控制（服务器-存储引擎）"><a href="#1-并发控制（服务器-存储引擎）" class="headerlink" title="1. 并发控制（服务器+存储引擎）"></a>1. 并发控制（服务器+存储引擎）</h3><ul>
<li>共享锁和排他锁（读写锁）</li>
<li><p>锁粒度：</p>
<ul>
<li>表锁：服务器会为ALTER TABLE这样的语句加表锁</li>
<li>行级锁：只在存储引擎实现</li>
</ul>
</li>
<li><p>事务的ACID：</p>
<ul>
<li>原子性：一个事务必须被视为不可分割的最小单元</li>
<li>一致性：数据库总是从一个一致的状态转到另一个一致的状态</li>
<li>隔离性：事务在最终提交之前对其他事务不可见</li>
<li>持久性：一旦事务提交，就会永久保存到数据库中</li>
</ul>
</li>
<li><p>隔离级别：</p>
<ul>
<li>未提交读：事务可以读未提交的数据</li>
<li>已提交读：满足隔离性，不能重复查询</li>
<li>可重复读：没有解决幻读（where读取范围内记录，如果另一个事务向范围内加入了记录，则产生幻行）</li>
<li>串行化：强制事务串行执行的</li>
</ul>
</li>
<li><p>死锁：</p>
<ul>
<li>死锁超时放弃</li>
<li>InnoDB：将持有最少行级排他锁的事务回滚</li>
</ul>
</li>
<li><p>显式锁：</p>
<ul>
<li>Lock in share mode</li>
<li>lock for update</li>
<li>ps：不满足SQL规范，应该少量使用</li>
</ul>
</li>
<li><p>InnoDB的MVCC（多版本并发控制）：</p>
<ul>
<li>在每行记录后面增加两列，一个保存行的创建时间，一个保存过期时间</li>
<li>SELECT：版本小于当前事务版本+删除版本要么未定义，要么大于事务版本号</li>
<li>UPDATE：插入记录保存当前版本号为创建时间+设置当前版本号为原有列的删除时间</li>
</ul>
</li>
</ul>
<h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h3><blockquote>
<p>InnoDB存储引擎</p>
</blockquote>
<ul>
<li>概览：<ul>
<li>数据存储在表空间</li>
<li>采用MVCC支持高并发</li>
<li>间隙锁（锁定查询涉及的行和索引中的间隙），防止幻读</li>
<li>采用聚簇索引</li>
<li>自适应哈希索引加速读操作</li>
<li>插入缓冲区加速写</li>
<li>支持热备份</li>
</ul>
</li>
</ul>
<blockquote>
<p>MyISAM存储引擎</p>
</blockquote>
<ul>
<li><p>特性：</p>
<ul>
<li>表级锁</li>
<li>支持repair操作</li>
<li>支持全文索引</li>
<li>延迟更新索引键（<code>DELAY_KEY_WRITE</code>）</li>
</ul>
</li>
<li><p>使用场景：</p>
<ul>
<li>不在乎并发和数据丢失，不需要事务</li>
<li>尤其在乎空间大小</li>
<li>支持地理空间搜索</li>
</ul>
</li>
</ul>
<h2 id="二、MySQL性能测试"><a href="#二、MySQL性能测试" class="headerlink" title="二、MySQL性能测试"></a>二、MySQL性能测试</h2><h3 id="1-常见指标"><a href="#1-常见指标" class="headerlink" title="1. 常见指标"></a>1. 常见指标</h3><ul>
<li>吞吐量：单位时间内事务处理数量（常见指标TPS）</li>
<li>响应时间或延迟</li>
<li>并发性：同时工作中的线程数和连接数</li>
<li>可扩展性</li>
</ul>
<h3 id="2-慢查询日志：开销最低，精度最高"><a href="#2-慢查询日志：开销最低，精度最高" class="headerlink" title="2. 慢查询日志：开销最低，精度最高"></a>2. 慢查询日志：开销最低，精度最高</h3><ul>
<li>使用pt-query-digest工具输出报告，找到执行最慢的语句</li>
<li><p>剖析单条查询：</p>
<ul>
<li>show profile</li>
<li>show status</li>
</ul>
</li>
<li><p>分析是否是服务器的问题：</p>
<ul>
<li>show global status</li>
<li>show processlist</li>
</ul>
</li>
</ul>
<h2 id="三、-MySQL高级特性"><a href="#三、-MySQL高级特性" class="headerlink" title="三、 MySQL高级特性"></a>三、 MySQL高级特性</h2><h3 id="1-视图"><a href="#1-视图" class="headerlink" title="1. 视图"></a>1. 视图</h3><ul>
<li>视图是虚拟表</li>
<li>不能对视图创建触发器，也不能DROP TABLE</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.24-Maven父子模块]]></title>
      <url>/2017/06/24/6.24-Maven%E7%88%B6%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="maven父子模块"><a href="#maven父子模块" class="headerlink" title="maven父子模块"></a>maven父子模块</h3><ol>
<li><p>父模块配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcloud.b2c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcloud-b2c-mall-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>b2c-mall-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>mall-web<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>父模块中注明子模块</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 管理子模块 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssmm<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>子模块中注明父模块</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcloud.b2c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcloud-b2c-mall-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>子模块配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 父模块artifactId-子模块的名称，且与name相同 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b2c-mall-web-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>b2c-mall-web-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 需部署的子项目为war，其他为jar --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.23-前后端交互逻辑]]></title>
      <url>/2017/06/23/6.23-%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<h3 id="一、根据优惠券逻辑学习Ajax前后交互的流程"><a href="#一、根据优惠券逻辑学习Ajax前后交互的流程" class="headerlink" title="一、根据优惠券逻辑学习Ajax前后交互的流程"></a>一、根据优惠券逻辑学习Ajax前后交互的流程</h3><ol>
<li><p>mall-service模块中的html页面,id和class都是js可选择绑定实现操作的对象</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"leftsub"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"coupontip couponbuttion"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;staticWebDomain&#125;/mall/images/lscoupon.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>html本页面上js语句控制点按事件</p>
</li>
</ol>
<ul>
<li>初始时，leftsub停靠在页面左侧（宽度3px），不高亮（class不带active）</li>
<li>点按后，leftsub扩展（宽度30px），高亮（class带active）</li>
<li>满足左边栏扩展情况下，点击优惠券图标，调用<code>itemPromotion &amp;&amp; itemPromotion.showCoupon(ev);</code></li>
</ul>
<ol>
<li><p>mall-web模块中的html页面，包含控件以及参数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"txt"</span> <span class="attr">id</span>=<span class="string">"coupons"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span></span></div><div class="line"><span class="attr">data-itemid</span>=<span class="string">"$!&#123;itemDetail.skuId&#125;"</span></div><div class="line"><span class="attr">data-venderid</span>=<span class="string">"$!&#123;itemExtendsInfoVo.venderId&#125;"</span></div><div class="line"><span class="attr">data-jcat</span>=<span class="string">"$!&#123;itemExtendsInfoVo.jdCategroy&#125;"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cate-label"</span>&gt;</span>领券<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cate-list couponlist"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>promotion.js中，<code>itemPromotion</code>初始化会调用<code>showCoupon</code>函数，通过<code>$(&#39;#coupons&#39;)</code>绑定控件，再获取<code>couponTrip.data(&#39;itemid&#39;);</code>等参数用于发送请求</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> showCoupon = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> couponTrip = $(<span class="string">'#coupons'</span>)</div><div class="line">    <span class="keyword">var</span> itemid = couponTrip.data(<span class="string">'itemid'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>static模块中promotion.js发送Ajax请求绘制优惠券页</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(dt.data.currentSkuConponList &amp;&amp; _.size(dt.data.currentSkuConponList)&gt;<span class="number">0</span>)&#123;</div><div class="line">    html.push(<span class="string">'&lt;h5&gt;&lt;span&gt;本品可用优惠券&lt;/span&gt;&lt;/h5&gt;'</span>);</div><div class="line">    html.push(<span class="string">'&lt;ul&gt;'</span>);</div><div class="line">    $.each(dt.data.currentSkuConponList, <span class="function"><span class="keyword">function</span>(<span class="params">index,con</span>)</span>&#123;</div><div class="line">          html.push(genUseConElement(con.batchId,con.parValue,con.quota,con.name,con.beginTime,con.endTime));</div><div class="line">    &#125;);</div><div class="line">    html.push(<span class="string">'&lt;/ul&gt;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>子函数<code>genUseConElement</code>负责绘制</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> genUseConElement = <span class="function"><span class="keyword">function</span>(<span class="params">batchId,discount,quota,name,beginTime,endTime</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> html = [];</div><div class="line">    html.push(<span class="string">'&lt;li id="'</span>+batchId+<span class="string">'" class="havecoupon"&gt;&lt;div class="couponleft"&gt;'</span>);</div><div class="line">    html.push(<span class="string">'&lt;div class="value"&gt;&lt;p&gt;&lt;span&gt;￥&lt;/span&gt;'</span>+parsePrice(discount)+<span class="string">'&lt;/p&gt;&lt;/div&gt;'</span>);</div><div class="line">    html.push(<span class="string">'&lt;div class="condition"&gt;&lt;/div&gt;&lt;h6&gt;'</span>+getQuotaHtml(quota)+<span class="string">'&lt;/h6&gt;&lt;p&gt;'</span>+name+<span class="string">'&lt;/p&gt;'</span>);</div><div class="line">    html.push(<span class="string">'&lt;p&gt;'</span>+(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(beginTime))).Format(<span class="string">'yyyy-MM-dd hh:mm'</span>)+<span class="string">'至'</span>+(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(endTime))).Format(<span class="string">'yyyy-MM-dd hh:mm'</span>)+<span class="string">'&lt;/p&gt;'</span>);</div><div class="line">    html.push(<span class="string">'&lt;/div&gt;&lt;/li&gt;'</span>);</div><div class="line">    <span class="keyword">return</span> html.join(<span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二、根据-item映射学习velocity模板使用"><a href="#二、根据-item映射学习velocity模板使用" class="headerlink" title="二、根据/item映射学习velocity模板使用"></a>二、根据/item映射学习velocity模板使用</h3><ol>
<li>velocity模板写法，以foreach为例</li>
</ol>
<ul>
<li>取参数：${item.xxx}，用！判断是否存在</li>
<li>流程控制：如#if，#end等，#end标记不可少</li>
<li>插件使用：同java用法，如imageUtils.getImageUrl4Jfs（xxx）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#foreach($skuPic in $itemDetail.images)</div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"tinypic#if($&#123;loopCounter&#125; == 0) cur#end"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$!imageUtils.getImageUrl4Jfs($!&#123;skuPic&#125;, 450, 450)"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">#end</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2.Controller写法，使用ModelAndView</p>
<ul>
<li>传参：request，response和其他参数</li>
<li>新建ModelAndView，传入跳转页参数</li>
<li>调用service查到相应内容Vo实体</li>
<li>实体和message等封装进ModelAndView</li>
<li>返回<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/item"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">item</span><span class="params">(</span></span></div><div class="line">HttpServletReques request, </div><div class="line">HttpServletResponse response, </div><div class="line">@RequestParam(value = <span class="string">"itemId"</span>, required = <span class="keyword">true</span>) Long itemId)&#123;</div><div class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"vm/shop/item"</span>);</div><div class="line">    CallerInfo callerInfo = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        callerInfo = Profiler.registerInfo(<span class="string">"com.jcloud.b2c.mall.web.controller.ItemController.item"</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">        ItemBasicInfoVo  itemBasicInfo = itemClient.getItemBasicInfo(</div><div class="line">        ControllerContext.getTenantId(), ControllerContext.getShopId(), itemId).getData();</div><div class="line">        <span class="keyword">if</span>(itemBasicInfo==<span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//不存在返回404页面</span></div><div class="line">            logger.warn(<span class="string">"无此商品,userId:&#123;&#125;,skuId:&#123;&#125;"</span>,</div><div class="line">            ControllerContext.getUserIdFormRequest(),itemId);</div><div class="line">            String referer = request.getHeader(<span class="string">"referer"</span>);</div><div class="line">            <span class="keyword">if</span>(referer!=<span class="keyword">null</span> &amp;&amp; referer.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">                modelAndView.addObject(<span class="string">"referer"</span>, referer);</div><div class="line">                &#125;</div><div class="line">            modelAndView.setViewName(<span class="string">"vm/shop/emptyItem"</span>);</div><div class="line">                <span class="keyword">return</span> modelAndView;</div><div class="line">            &#125;</div><div class="line">        <span class="comment">//省略了存在的部分</span></div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="三、Controller参数解析"><a href="#三、Controller参数解析" class="headerlink" title="三、Controller参数解析"></a>三、Controller参数解析</h3><ul>
<li>SpringMVC处理请求流程：<ul>
<li>首先被DispatcherServlet截获</li>
<li>DispatcherServlet通过handlerMapping获得HandlerExecutionChain</li>
<li>然后获得HandlerAdapter</li>
<li>HandlerAdapter在内部对于每个请求，都会实例化一个ServletInvocableHandlerMethod进行处理</li>
<li>ServletInvocableHandlerMethod对请求跟响应进行处理。请求方法参数的处理、响应返回值的处理，分别是HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.22-Ajax学习]]></title>
      <url>/2017/06/22/6.22-Ajax/</url>
      <content type="html"><![CDATA[<h3 id="一、ajax方法参数详解"><a href="#一、ajax方法参数详解" class="headerlink" title="一、ajax方法参数详解"></a>一、ajax方法参数详解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="comment">//url:发送请求的地址</span></div><div class="line">    url: <span class="string">"/shop/isFavor"</span>,</div><div class="line">    <span class="comment">//type:请求方式默认为get</span></div><div class="line">    type: <span class="string">"post"</span>,</div><div class="line">    <span class="comment">//async：确认请求为异步请求</span></div><div class="line">    <span class="keyword">async</span>:<span class="literal">true</span>,</div><div class="line">    <span class="comment">//附加在URL后面的参数</span></div><div class="line">    data:&#123;<span class="attr">itemId</span>:itemid&#125;,</div><div class="line">    <span class="comment">//预期服务器返回的数据类型</span></div><div class="line">    dataType: <span class="string">"json"</span>,</div><div class="line">    <span class="comment">//成功的回调函数</span></div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(data &amp;&amp; data.errorCode==<span class="number">0</span> &amp;&amp; data.data)&#123;</div><div class="line">            $(<span class="string">'.favoritebtn'</span>).addClass(<span class="string">'active'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//失败的回调函数</span></div><div class="line">    error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//alert('fail');</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="二、Jquery"><a href="#二、Jquery" class="headerlink" title="二、Jquery"></a>二、Jquery</h3><ol>
<li>定位元素：<br><code>$(this)</code>定位当前<br><code>$(&quot;#abc&quot;）</code>通过id定位<br><code>$(&quot;.abc&quot;)</code> 通过class定位<br><code>$(&quot;div&quot;)</code> 通过标签定位</li>
<li>常见方法</li>
</ol>
<ul>
<li>动画类：<br>.show()：显示HTML元素<br>.hide()：隐藏HTML元素<br>.toggle()：在显示和隐藏之间切换<br>.fadeIn()：淡入淡出（Out/Toggle）<br>.slideTown()：向下滑动</li>
<li>HTML类：<br>.text()：设置或返回所选元素的文本内容<br>.val()：设置或返回表单字段值<br>.html()：设置或返回带HTML标记的所选元素内容<br>.attr()：获取属性值<br>.append()：在所选元素结尾插入内容<br>.prepend()：在所选元素开头插入内容<br>.remove()：删除元素<br>.empty()：删除子元素<br>.removeClass()：删除CSS类<br>.addClass()：添加CSS类<br>.css()：返回指定的CSS属性值</li>
<li>遍历：<br>.children()：返回被选元素的下一个后代<br>.find()：返回被选元素的后代，直到最后一层<br>.each()：迭代JQuery对象，进行操作</li>
</ul>
<ol>
<li>基础语法：<code>$(selector).action()</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.19-并发编程复习]]></title>
      <url>/2017/06/19/6.19-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、进程和线程"><a href="#一、进程和线程" class="headerlink" title="一、进程和线程"></a>一、进程和线程</h3><ul>
<li>进程对应的是程序，每个进程对应一定的地址空间，暂停时保存当前的状态，为进程切换提供了可能</li>
<li>单核CPU的话任一时间只有一个进程在占用CPU</li>
<li>针对进程子任务只能串行的问题，出现了线程的概念。每个线程对应一个子任务。（为什么不多进程？分配进程成本高，进程切换消耗大，进程间资源不共享）</li>
<li>进程让操作系统的并发性成为可能，而线程让进程的内部并发成为可能。进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位。线程共享进程的资源</li>
</ul>
<h3 id="二、Java内存模型"><a href="#二、Java内存模型" class="headerlink" title="二、Java内存模型"></a>二、Java内存模型</h3><ul>
<li>线程间共享变量存储在主内存中</li>
<li>每个线程都有私有的本地工作内存，本地内存中存储了共享变量的副本，线程对变量的读写操作都在本地进行。</li>
</ul>
<h3 id="三、并发编程需要考虑的问题"><a href="#三、并发编程需要考虑的问题" class="headerlink" title="三、并发编程需要考虑的问题"></a>三、并发编程需要考虑的问题</h3><ul>
<li><p>共享性</p>
<ul>
<li>每个线程操作的始终是本地内存中的变量 </li>
<li>Servlet以单实例多线程的方式工作。只要Servlet中的代码只使用局部变量，Servlet就不会导致同步问题。</li>
<li>Spring MVC的控制器也是这么做的，从请求中获得的对象都是以方法的参数传入而不是作为类的成员。</li>
<li>Struts2的做法正好相反，因此Struts2中作为控制器的Action类都是每个请求对应一个实例</li>
</ul>
</li>
<li><p>互斥性</p>
<ul>
<li>加锁（共享锁、排他锁）</li>
<li>不变模式，用final修饰。Java中的Spring就是具有不变形的代表，所以是线程安全的</li>
</ul>
</li>
<li><p>原子性</p>
<ul>
<li>volatile无法保证原子性 </li>
</ul>
</li>
<li><p>可见性</p>
<ul>
<li>volatile修饰的变量，更改后会立刻刷新到主内存中，其他线程也会进行同步</li>
</ul>
</li>
<li><p>有序性</p>
<ul>
<li>编译级别的重排序，比如编译器的优化</li>
<li>指令级重排序，比如CPU指令执行的重排序</li>
<li>内存系统的重排序，比如缓存和读写缓冲区导致的重排序</li>
</ul>
</li>
</ul>
<h3 id="四、volatile和synchronized"><a href="#四、volatile和synchronized" class="headerlink" title="四、volatile和synchronized"></a>四、volatile和synchronized</h3><ul>
<li><p>实现原理：</p>
<ul>
<li>volatile：lock前缀指令实现内存屏障，防止指令重排，并且把指令直接更新到主存中</li>
<li>synchronized：在JVM层次实现，使用monitor（<code>每个对象</code>都有一个监视器锁）来实现同步，其中同步代码块采用monitorenter、monitorexit指令显式实现，而同步方法则使用ACC_SYNCHRONIZED标记符隐式实现</li>
</ul>
</li>
<li><p>修饰对象：</p>
<ul>
<li>volatile：修饰变量</li>
<li>synchronized：修饰成员方法（锁该对象），修饰静态方法（锁该类的.Class对象），修饰代码块（可以指定需要哪个对象的锁）。</li>
</ul>
</li>
</ul>
<h3 id="五、线程状态改变"><a href="#五、线程状态改变" class="headerlink" title="五、线程状态改变"></a>五、线程状态改变</h3><ul>
<li>Object的方法：wait/notify/notifyAll</li>
<li>Thread的方法：sleep/join/yield<ul>
<li>wait：释放锁，进入等待池</li>
<li>join：使主线程等待子线程执行完成后再执行，换句话说就是将线程的并行执行变为串行执行</li>
<li>yield：线程让出CPU，回到就绪状态</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.18-Spring Boot自定义Starter]]></title>
      <url>/2017/06/18/6.18-Spring%20Boot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</url>
      <content type="html"><![CDATA[<h3 id="一、maven依赖"><a href="#一、maven依赖" class="headerlink" title="一、maven依赖"></a>一、maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="二、设置配置文件相应类目的前缀"><a href="#二、设置配置文件相应类目的前缀" class="headerlink" title="二、设置配置文件相应类目的前缀"></a>二、设置配置文件相应类目的前缀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"example.service"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleServiceProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String prefix;</div><div class="line">    <span class="keyword">private</span> String suffix;</div><div class="line">    <span class="comment">//省略 getter setter</span></div></pre></td></tr></table></figure>
<h3 id="三、编写AutoConfigure类"><a href="#三、编写AutoConfigure类" class="headerlink" title="三、编写AutoConfigure类"></a>三、编写AutoConfigure类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//当classpath下发现该类的情况下进行自动配置</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(ExampleService.class)</div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(ExampleServiceProperties.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleAutoConfigure</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ExampleServiceProperties properties;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="comment">//当Spring Context中不存在该Bean时</span></div><div class="line">    <span class="meta">@ConditionalOnMissingBean</span></div><div class="line">    <span class="comment">//当配置文件中example.service.enabled=true时</span></div><div class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"example.service"</span>,value = <span class="string">"enabled"</span>,havingValue = <span class="string">"true"</span>)</div><div class="line">    <span class="function">ExampleService <span class="title">exampleService</span> <span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ExampleService(properties.getPrefix(),properties.getSuffix());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、在resources-META-INF-下创建spring-factories文件"><a href="#四、在resources-META-INF-下创建spring-factories文件" class="headerlink" title="四、在resources/META-INF/下创建spring.factories文件"></a>四、在resources/META-INF/下创建spring.factories文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.ExampleAutoConfigure</div></pre></td></tr></table></figure>
<h3 id="五、原理"><a href="#五、原理" class="headerlink" title="五、原理"></a>五、原理</h3><ol>
<li>Spring Boot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR包</li>
<li>根据spring.factories配置加载AutoConfigure类</li>
<li>根据 @Conditional注解的条件，进行自动配置并将Bean注入Spring Context</li>
</ol>
<h3 id="六、鸣谢"><a href="#六、鸣谢" class="headerlink" title="六、鸣谢"></a>六、鸣谢</h3><p><a href="http://www.jianshu.com/p/45538b44e04e" target="_blank" rel="external">http://www.jianshu.com/p/45538b44e04e</a></p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.17-同步改异步]]></title>
      <url>/2017/06/17/6.17-%E6%B7%BB%E5%8A%A0%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="一、优惠券改为异步方法"><a href="#一、优惠券改为异步方法" class="headerlink" title="一、优惠券改为异步方法"></a>一、优惠券改为异步方法</h3><ol>
<li>启动Application类中添加异步注解@EnableAsync</li>
<li><p>Controller中改写相应方法，返回Future类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//可领取的券</span></div><div class="line">Future&lt;BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt;&gt; skuCouponResultFuture = promotionAsyncService.findJoinActives(jdUserId,Integer.valueOf(cid),</div><div class="line">itemId,Integer.valueOf(venderId),tenantId);</div><div class="line"><span class="comment">//本品可用的券</span></div><div class="line">Future&lt;BaseResponseVo&lt;List&lt;ItemCouponVO&gt;&gt;&gt; currentSkuCouponResultFuture = promotionAsyncService.findCanUseCoupons(jdUserId,</div><div class="line">Integer.valueOf(cid), itemId,Integer.valueOf(venderId),tenantId);</div><div class="line"><span class="comment">//已领取的券</span></div><div class="line">Future&lt;BaseResponseVo&lt;List&lt;CouponBatchActiveExtVo&gt;&gt;&gt; userConponResultFuture = promotionAsyncService.queryUsableCouponPage(jdUserId, <span class="string">"1"</span>,tenantId, itemId);</div></pre></td></tr></table></figure>
</li>
<li><p>添加相应的AsyncService接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可领取的券-接口</span></div><div class="line">Future&lt;BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt;&gt; findJoinActives(String jdUserId, <span class="keyword">int</span> cId, Long skuId, <span class="keyword">int</span> venderId, Long tenantId);</div></pre></td></tr></table></figure>
</li>
<li><p>添加相应的AsyncServiceImpl，添加@Async注解，调用非Async的Service方法获取结果，包装成AsyncResult类型返回</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="keyword">public</span> Future&lt;BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt;&gt; findJoinActives(String jdUserId, <span class="keyword">int</span> cId, Long skuId, <span class="keyword">int</span> venderId, Long tenantId) &#123;</div><div class="line">    LOGGER.info(<span class="string">"--------PromotionAsyncServiceImpl.findJoinActives------start"</span>);</div><div class="line">    BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt; responseVo = promotionService.findJoinActives(jdUserId,cId,skuId,venderId,tenantId);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt;&gt;(responseV);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Future结果获取,使用get()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Long startTime = System.currentTimeMillis();</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(skuCouponResultFuture.isDone() &amp;&amp; currentSkuCouponResultFuture.isDone()</div><div class="line">        &amp;&amp; userConponResultFuture.isDone())&#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((System.currentTimeMillis() - startTime) &gt; <span class="number">2000</span>) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">BaseResponseVo&lt;List&lt;CouponBatchActiveVo&gt;&gt; skuCouponResult = skuCouponResultFuture.get();</div><div class="line">BaseResponseVo&lt;List&lt;ItemCouponVO&gt;&gt; currentSkuCouponResult = currentSkuCouponResultFuture.get();</div><div class="line">BaseResponseVo&lt;List&lt;CouponBatchActiveExtVo&gt;&gt; userConponResult = userConponResultFuture.get();</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二、通过Feign调用的Controller修改成异步"><a href="#二、通过Feign调用的Controller修改成异步" class="headerlink" title="二、通过Feign调用的Controller修改成异步"></a>二、通过Feign调用的Controller修改成异步</h3><p>直接新建一个Service和对应的ServiceImpl，新建@Async方法，把通过client调用的方法包含在方法体内，实现异步。</p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.16-MyBatis复习]]></title>
      <url>/2017/06/16/6.16-MyBatis%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、备忘常识"><a href="#一、备忘常识" class="headerlink" title="一、备忘常识"></a>一、备忘常识</h3><ol>
<li><p>ResultMap和ResultType：ResultType直接表示返回类型，ResultMap则是外部引用。相比ResultType，ResultMap适用于配置较为复杂的查询。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Comment"</span> <span class="attr">id</span>=<span class="string">"CommentResult"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"blog"</span> <span class="attr">select</span>=<span class="string">"selectBlog"</span> <span class="attr">column</span>=<span class="string">"blog"</span> <span class="attr">javaType</span>=<span class="string">"Blog"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectComment"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"CommentResult"</span>&gt;</span></div><div class="line">select * from t_Comment where id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></div><div class="line">select * from t_Blog where id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>MyBatis的@Param和Spring的@Param：两个注解功能几乎相同，但是在编写相应XML文件时存在差别，spring中的@param在XML中按照变量顺序引用。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectRoleCount"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></div><div class="line">select </div><div class="line">    count(tbm.id)</div><div class="line">    from t_business_member_relation tbm</div><div class="line">    where tbm.business_id = #&#123;0,jdbcType=INTEGER&#125;</div><div class="line">    and tbm.member_id = #&#123;1,jdbcType=INTEGER&#125;</div><div class="line">    and tbm.role_business_id is not null</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>SpringMVC的传参方式</p>
</li>
</ol>
<ul>
<li>@PathVariable：<br>对应@RequestMapping(value=”/owners/{ownerId}”,method,RequestMethod.GET) </li>
<li>@RequestParam:<br>包含3个配置 @RequestParam(required = ,value=””, defaultValue = “”) </li>
<li>@CookieValue:获取cookie信息 </li>
<li>@RequestHeader:获取请求的头部信息</li>
<li>@RequestBody:接收Json对象的字符串，而不是Json对象</li>
</ul>
<h3 id="二、Mybatis表达式注意点"><a href="#二、Mybatis表达式注意点" class="headerlink" title="二、Mybatis表达式注意点"></a>二、Mybatis表达式注意点</h3><ol>
<li>if标签使用的是OGNL表达式</li>
<li>OGNL对于Boolean的定义和JavaScript有点像，即<code>&#39;&#39; == 0 == false</code>，只有String类型才需要判断是否<code>！=&#39;&#39;</code>,其余判断是否<code>！=null</code>即可。</li>
<li>单引号内为单个字符时，OGNL会识别为Char类型，所以判断String是否为非空且等于单字符长度的字符串时，需要使用双引号而非单引号。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.15-消息队列]]></title>
      <url>/2017/06/15/6.15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h3 id="一、主要应用方案"><a href="#一、主要应用方案" class="headerlink" title="一、主要应用方案"></a>一、主要应用方案</h3><blockquote>
<p>异步处理</p>
</blockquote>
<p>场景：用户注册时，先将注册信息写入数据库，然后发送短信和邮件<br>方案：使用消息队列，将发送短信和邮件任务写入队列中，直接返回</p>
<blockquote>
<p>应用解耦</p>
</blockquote>
<p>场景：用户下单后，订单系统需要通知库存系统减库存。也就意味着订单和库存系统耦合了。<br>方案：用户下单后，订单系统完成持久化处理，将消息写入队列。库存系统从订阅的消息队列中获取信息进行更新</p>
<blockquote>
<p>秒杀</p>
</blockquote>
<p>场景：秒杀活动一般会因为流量过大导致流量暴增。<br>方案：服务器接收秒杀请求，写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到秒杀失败页面。</p>
<blockquote>
<p>日志</p>
</blockquote>
<p>方案：日志采集客户端将日志放入Kafka队列中</p>
<h3 id="二、JMS消息服务"><a href="#二、JMS消息服务" class="headerlink" title="二、JMS消息服务"></a>二、JMS消息服务</h3><ol>
<li>P2P模式：P2P模式包含三个角色：消息队列（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</li>
</ol>
<ul>
<li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li>
<li>接收者在成功接收消息之后需向队列应答成功</li>
</ul>
<ol>
<li>Pub/sub模式：多个发布者（Publisher）将消息发送到Topic,系统将这些消息传递给多个订阅者（Subscriber）。</li>
</ol>
<ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li>
<li>为了消费消息，订阅者必须保持运行的状态。</li>
</ul>
<h3 id="三、代码实现（广告词为空时异步添加到MQ，执行添加缓存操作）"><a href="#三、代码实现（广告词为空时异步添加到MQ，执行添加缓存操作）" class="headerlink" title="三、代码实现（广告词为空时异步添加到MQ，执行添加缓存操作）"></a>三、代码实现（广告词为空时异步添加到MQ，执行添加缓存操作）</h3><ol>
<li>编写message实体类AdWordsSubmitMessage</li>
<li><p>添加配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### MQ #####</div><div class="line">spring.activemq.broker-url=failover://(tcp://192.168.170.93:61616)?randomize=false&amp;priorityBackup=true</div><div class="line">spring.activemq.in-memory=true</div><div class="line">spring.activemq.pool.enabled=false</div></pre></td></tr></table></figure>
</li>
<li><p>调用MQ接口发送数据</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqManager</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</div><div class="line">    <span class="comment">//调用MQ接口发送数据</span></div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDataToMQ</span><span class="params">(<span class="keyword">final</span> String queueName, <span class="keyword">final</span> String dataMessage)</span> </span>&#123;</div><div class="line">        jmsTemplate.send(queueName,<span class="keyword">new</span> MessageCreator() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">                TextMessage mm = session.createTextMessage();</div><div class="line">                mm.setText(dataMessage);</div><div class="line">                <span class="keyword">return</span> mm;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>ServiceImpl中注入MQmanager，添加调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步发送MQ，广告词存缓存</span></div><div class="line">AdWordsSubmitMessage adm = <span class="keyword">new</span> AdWordsSubmitMessage();</div><div class="line">adm.setTenantId(tenantId);</div><div class="line">adm.setShopId(shopId);</div><div class="line">adm.setJdSkuId(jdSkuId);</div><div class="line">mqManager.sendDataToMQ(AdWordsMqDict.AD_WORDS_SUBMIT, JSON.toJSONString(adm));</div></pre></td></tr></table></figure>
</li>
<li><p>消息队列监听</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMessageListener</span> </span>&#123;</div><div class="line">    <span class="comment">//注入接收到消息后进行的订单操作</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">     <span class="keyword">private</span> AdWordsMessageProcessor adWordsMessageProcessor;</div><div class="line"></div><div class="line">    <span class="comment">//监听指定消息队列</span></div><div class="line">    <span class="meta">@JmsListener</span>(destination = AdWordsMqDict.AD_WORDS_SUBMIT, concurrency = <span class="string">"50"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            logger.info(<span class="string">"接收到消息message=&#123;&#125;"</span>, message);</div><div class="line">            adWordsMessageProcessor.processorMessage(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"AdWordsMessageListener.message=&#123;&#125; error:"</span>, message,e);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>监听到后操作Processor</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdWordsMessageProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemAdWordsService itemAdWordsService;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> CacheClient cacheFeignClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processorMessage</span><span class="params">(String message)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            AdWordsSubmitMessage orderSubmitMessage = JSON.parseObject(message, AdWordsSubmitMessage.class);</div><div class="line">            AdWords[] queryAdWords = itemAdWordsService.queryAdWords(orderSubmitMessage.getTenantId(),</div><div class="line">                    orderSubmitMessage.getShopId(), orderSubmitMessage.getJdSkuId());</div><div class="line">            <span class="keyword">if</span> (queryAdWords != <span class="keyword">null</span> &amp;&amp; queryAdWords.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                String queryAdWordsStr = JSON.toJSONString(queryAdWords);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//写缓存</span></div><div class="line">                    cacheFeignClient.saveBytes2Cache(orderSubmitMessage.getTenantId(), getRedisKey(orderSubmitMessage.getTenantId(),</div><div class="line">                            orderSubmitMessage.getShopId(), orderSubmitMessage.getJdSkuId()), queryAdWordsStr.getBytes(<span class="string">"UTF-8"</span>), <span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    log.error(<span class="string">"广告词存缓存失败 jdskuid:"</span>, orderSubmitMessage.getJdSkuId());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(<span class="string">"处理广告词存缓存消息异常，message=&#123;&#125;"</span>, message, e);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.14-Redis分布式锁]]></title>
      <url>/2017/06/14/6.14-Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      <content type="html"><![CDATA[<h2 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h2><h3 id="一、Redis特性"><a href="#一、Redis特性" class="headerlink" title="一、Redis特性"></a>一、Redis特性</h3><ul>
<li>Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问。</li>
<li>多客户端对redis的连接并不存在竞争关系。</li>
<li>Redis命令操作具有原子性。</li>
</ul>
<h3 id="二、分布式锁的要求"><a href="#二、分布式锁的要求" class="headerlink" title="二、分布式锁的要求"></a>二、分布式锁的要求</h3><ul>
<li>安全性： 互斥，在任何时候，只有一个客户端能持有锁。</li>
<li>活跃性A：没有死锁，即使客户端在持有锁的时候崩溃，最后也会有其他客户端能获得锁，有超时机制。</li>
<li>活跃性B：故障容忍，只有大多数Redis节点时存活的，客户端仍可以获得锁和释放锁。</li>
</ul>
<h3 id="三、实现锁的重要命令"><a href="#三、实现锁的重要命令" class="headerlink" title="三、实现锁的重要命令"></a>三、实现锁的重要命令</h3><blockquote>
<p>SETNX key value</p>
</blockquote>
<p>当且仅当key不存在时，将key的值设为value，返回1<br>若给定的key已经存在，则SETNX不做任何动作，返回0</p>
<blockquote>
<p>GETSET key value </p>
</blockquote>
<p>将给定key的值设为value，返回key对应的旧的value<br>当key存在但不是字符串类型时，返回一个错误<br>当key不存在时，返回nil<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上锁  </span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">acquireLock</span><span class="params">(Long tenantId, String lockKey, <span class="keyword">long</span> expired)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">long</span> value = System.currentTimeMillis() + expired;</div><div class="line">    <span class="comment">//通过SETNX试图获取一个lock</span></div><div class="line">    <span class="keyword">boolean</span> flag = cacheClient.setnx(tenantId, lockKey, String.valueOf(value));</div><div class="line">    <span class="comment">//SETNX成功，则成功获取一个锁</span></div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        success = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//SETNX失败，说明锁仍然被其他对象保持，检查其是否已经超时（GET方法获取oldValue）</span></div><div class="line">        <span class="keyword">long</span> oldValue = Long.valueOf(cacheClient.get(tenantId, lockKey));</div><div class="line">        <span class="comment">//如果超时，使用GETSET</span></div><div class="line">        <span class="keyword">if</span> (oldValue &lt; System.currentTimeMillis()) &#123;</div><div class="line">            String getValue = cacheClient.getSet(tenantId, lockKey, String.valueOf(value));</div><div class="line">            <span class="comment">// 如果oldValue与getSet获得的相同，则该线程获取锁成功</span></div><div class="line">            <span class="keyword">if</span> (Long.valueOf(getValue) == oldValue) &#123;</div><div class="line">                success = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则，已被其他进程捷足先登</span></div><div class="line">                success = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//未超时，则直接返回失败</span></div><div class="line">            success = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> success;</div><div class="line">&#125;</div><div class="line"><span class="comment">//解锁</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">(Long tenantId, String lockKey)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果在获取锁的情况下，操作超时，那么锁有可能会被其他线程夺走</span></div><div class="line">    <span class="comment">//所以在调用前判断下自身是否已经超时</span></div><div class="line">    cacheClient.del(tenantId,lockKey);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.13-SQL优化相关]]></title>
      <url>/2017/06/13/6.13-SQL%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="SQL优化方法"><a href="#SQL优化方法" class="headerlink" title="SQL优化方法"></a>SQL优化方法</h2><h3 id="一、异步写数据库"><a href="#一、异步写数据库" class="headerlink" title="一、异步写数据库"></a>一、异步写数据库</h3><blockquote>
<p>新开线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>,</div><div class="line">    <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        res = favoriteItemMapper.insertFavoriteItem(favoriteItem);</div><div class="line">        log.info(<span class="string">"添加喜欢商品结束：受影响行数：&#123;&#125;"</span>,res);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>主要问题：</p>
<ul>
<li>每次操作都新开线程池，资源消耗很大</li>
<li>线程池设置的存活时间极短，没有体现池的优势</li>
</ul>
<blockquote>
<p>消息队列ActiveMQ</p>
</blockquote>
<h3 id="二、SQL语句优化"><a href="#二、SQL语句优化" class="headerlink" title="二、SQL语句优化"></a>二、SQL语句优化</h3><ol>
<li>避免select * 的存在</li>
<li>动态SQL  </li>
</ol>
<p>例如一个插入语句，可以根据参数包含属性的不同，有选择的进行属性插入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertFavoriteItem"</span> <span class="attr">parameterType</span>=<span class="string">"com.jcloud.b2c.favoriteItem.domain.FavoriteItem"</span> &gt;</span></div><div class="line">        insert into user_favorite_item</div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"tenantId != null"</span> &gt;</span></div><div class="line">                tenant_id,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"shopId != null"</span> &gt;</span></div><div class="line">                shop_id,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuId != null"</span> &gt;</span></div><div class="line">                sku_id,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span> &gt;</span></div><div class="line">                user_id,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"addTime != null"</span> &gt;</span></div><div class="line">                add_time,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuName != null"</span> &gt;</span></div><div class="line">                sku_name,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuPictureUrl != null"</span> &gt;</span></div><div class="line">                sku_picture_url,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"tenantId != null"</span> &gt;</span></div><div class="line">                #&#123;tenantId,jdbcType=BIGINT&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"shopId != null"</span> &gt;</span></div><div class="line">                #&#123;shopId,jdbcType=BIGINT&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuId != null"</span> &gt;</span></div><div class="line">                #&#123;skuId,jdbcType=BIGINT&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userId != null"</span> &gt;</span></div><div class="line">                #&#123;userId,jdbcType=BIGINT&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"addTime != null"</span> &gt;</span></div><div class="line">                #&#123;addTime,jdbcType=TIMESTAMP&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuName != null"</span> &gt;</span></div><div class="line">                #&#123;skuName,jdbcType=VARCHAR&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"skuPictureUrl != null"</span> &gt;</span></div><div class="line">                #&#123;skuPictureUrl,jdbcType=VARCHAR&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="三、二级缓存-减少SQL访问次数"><a href="#三、二级缓存-减少SQL访问次数" class="headerlink" title="三、二级缓存,减少SQL访问次数"></a>三、二级缓存,减少SQL访问次数</h3><p>例如BatchPrices批价格的获取，设置一个30s的缓存，可以提高刷新操作的效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Long tenantId = ControllerContext.getTenantId();</div><div class="line">    <span class="comment">//静态方法拼装Redis的Key</span></div><div class="line">    String key = CacheKeyUtils.getProductpPriceKey(B2C_BATCH_PRICE_KEY + tenantId + itemIds + priceArea);</div><div class="line">    <span class="comment">//Guava一级缓存（get方法）</span></div><div class="line">    result = CACHE_PRICE.get(key, <span class="keyword">new</span> Callable&lt;BaseResponseVo&lt;List&lt;ItemPriceVo&gt;&gt;&gt;() &#123;</div><div class="line">        <span class="keyword">public</span> BaseResponseVo&lt;List&lt;ItemPriceVo&gt;&gt; call() &#123;</div><div class="line">            <span class="comment">//从Redis中获取值，拼装成返回值BaseResponseVo&lt;List&lt;ItemPriceVo&gt;&gt;</span></div><div class="line">            String json = cacheFeignClient.get(tenantId, key);</div><div class="line">            BaseResponseVo&lt;List&lt;ItemPriceVo&gt;&gt; priceRes = <span class="keyword">new</span> BaseResponseVo();</div><div class="line">            priceRes.setData(Collections.EMPTY_LIST);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(json)) &#123;</div><div class="line">            <span class="comment">//Redis未命中，访问数据库</span></div><div class="line">                riceRes = itemClient.findItemsPrice(ControllerContext.getTenantId(),ControllerContext.getShopId(), itemIds, priceArea);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">//写入缓存，存活时间30s</span></div><div class="line">                        cacheFeignClient.saveBytes2Cache(tenantId, key, JSON.toJSONString(priceRes).getBytes(<span class="string">"UTF-8"</span>), <span class="number">30</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//Redis命中，从缓存中取数据</span></div><div class="line">                priceRes =  JSON.parseObject(json, <span class="keyword">new</span> TypeReference&lt;List&lt;ItemPriceVo&gt;&gt;() &#123;&#125;.getType());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> priceRes;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.12-项目中缓存的使用]]></title>
      <url>/2017/06/12/6.12-%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h2 id="添加-删除收藏流程优化（Guava-Redis）"><a href="#添加-删除收藏流程优化（Guava-Redis）" class="headerlink" title="添加/删除收藏流程优化（Guava+Redis）"></a>添加/删除收藏流程优化（Guava+Redis）</h2><h3 id="一、缓存的使用"><a href="#一、缓存的使用" class="headerlink" title="一、缓存的使用"></a>一、缓存的使用</h3><blockquote>
<p>Google的Cache——Guava</p>
</blockquote>
<ol>
<li>本地缓存开关</li>
</ol>
<ul>
<li><p>创建缓存对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Cache&lt;String, String&gt; CACHE_SWITCH = CacheBuilder.newBuilder().maximumSize(<span class="number">100</span>).expireAfterWrite(<span class="number">2</span>, TimeUnit.MINUTES).build();</div></pre></td></tr></table></figure>
</li>
<li><p>调用缓存中的get方法，当缓存命中时直接返回结果，当不命中时，通过给定的Callable类call（）方法返回结果，再缓存。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String flagKey = B2C_ITEM_FAVORITE_SWITCH + tenantId;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String key = CACHE_SWITCH.get(flagKey, <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                String flag = cacheClient.get(tenantId, flagKey);</div><div class="line">                <span class="keyword">return</span> <span class="string">"true"</span>.equals(flag) ? <span class="string">"true"</span> : <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Redis缓存</p>
</blockquote>
<ul>
<li>生成Redis的key</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String redisKey = <span class="keyword">this</span>.getSkuItemFavorsKey(favoriteItemVo.getTenantId(), favoriteItemVo.getUserId(), favoriteItemVo.getSkuId());</div></pre></td></tr></table></figure>
<ul>
<li><p>调用cacheClient</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String favor = cacheClient.get(favoriteItemVo.getTenantId(), redisKey);</div></pre></td></tr></table></figure>
</li>
<li><p>保存到Redis</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//favorFlag为value，0为expireSecond</span></div><div class="line">cacheClient.save2Cache(favoriteItemVo.getTenantId(), redisKey, favorFlag, <span class="number">0</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="二、缓存逻辑"><a href="#二、缓存逻辑" class="headerlink" title="二、缓存逻辑"></a>二、缓存逻辑</h3><ol>
<li>本地缓存作为开关，如果有收藏功能，流程才继续</li>
<li>查Redis看是否命中缓存，如果命中，收藏结束</li>
<li>（Redis未命中）查询商品是否已经收藏</li>
<li>如果已经收藏，补充Redis缓存内容</li>
<li>（商品未收藏）启动DAO操作，向数据库中添加信息</li>
</ol>
<h3 id="三、二级缓存的好处到底是什么？"><a href="#三、二级缓存的好处到底是什么？" class="headerlink" title="三、二级缓存的好处到底是什么？"></a>三、二级缓存的好处到底是什么？</h3><p>在缓存到远程Redis的同时，缓存一份到本地进程Cache。使用了这样的二级缓存之后，取缓存的时候会先取本地，本地没有再向redis请求。这样会减少应用服务器&lt;–&gt;缓存服务器redis之间的网络开销。</p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.9-Spring Cloud学习（二）]]></title>
      <url>/2017/06/09/6.9-Spring%20Cloud%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="二、Ribbon"><a href="#二、Ribbon" class="headerlink" title="二、Ribbon"></a>二、Ribbon</h3><p>基于HTTP和TCP的负载均衡工具，实现客户端负载均衡。与服务端负载均衡不同的是，客户端负载均衡中，所有客户端节点维护着自己要访问的服务端清单，服务端清单来自注册中心。</p>
<blockquote>
<p>基本使用 </p>
</blockquote>
<ul>
<li>服务提供者启动多个服务实例，注册到一个或者多个关联的注册中心</li>
<li>消费者调用被@LoadBalanced注解过的RestTemplate</li>
</ul>
<blockquote>
<p>源码分析</p>
</blockquote>
<ul>
<li>LoadBalancerClient（客户端负载均衡器）中应该包含的能力：<ul>
<li>choose：挑选对应服务的实例</li>
<li>execute：执行请求</li>
<li>reconstructURI：拼接URI</li>
</ul>
</li>
<li>LoadBalancerAutoConfiguration自动化配置类：<ul>
<li>创建LoadBalancerInterceptor的Bean，用于拦截请求</li>
<li>创建RestTemplateCustomizer的Bean，用于给RestTemplate增加拦截器</li>
<li>维护一个被@LoadBalanced注解修饰的RestTemplate对象列表</li>
</ul>
</li>
<li>负载均衡规则实现：<ul>
<li>RandomRule：随机选取</li>
<li>RoundRobinRule: 使用了一个AtomicInteger实现线性轮询</li>
<li>RetryRule： 具备重试机制</li>
<li>ZoneAvoidanceRule：默认的负载均衡策略，两次过滤（先过滤清单，再轮询选择），先选取Zone，再使用Zone中指定的过滤器</li>
</ul>
</li>
</ul>
<h3 id="三、Hystrix"><a href="#三、Hystrix" class="headerlink" title="三、Hystrix"></a>三、Hystrix</h3><p>当某个服务单元发生故障时，通过断路器故障监控，向调用方返回错误响应。</p>
<h3 id="四、Feign"><a href="#四、Feign" class="headerlink" title="四、Feign"></a>四、Feign</h3><p>整合了Ribbon与Hystrix，并且提供了声明式的Web服务客户端定义方式。</p>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.8-商品页请求分析]]></title>
      <url>/2017/06/08/6.8-360mall%E5%95%86%E5%93%81%E9%A1%B5%E8%AF%B7%E6%B1%82%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="一、商品详情页面controller集合"><a href="#一、商品详情页面controller集合" class="headerlink" title="一、商品详情页面controller集合"></a>一、商品详情页面controller集合</h3><ol>
<li>getCartNum（购物车中物品数量）使用了Guava Cache</li>
<li>hotword（热门搜索词）使用了b2c.mall.service中的ES搜索</li>
<li>batchPrice（缓存的一批价格）</li>
<li>existsSkuList（是否存在SkuList）</li>
<li>promotion（赠品）调用了开普勒接口</li>
<li>isFavor（是否是收藏）</li>
<li>itemDescribe（获取规格参数）</li>
<li>getByLocationId ==location的接口位置没找到==</li>
<li>getProductType（商品类型）</li>
<li>price（商品价格）</li>
<li>stock（商品可售状态）</li>
<li>add（点按收藏）与del（取消收藏）</li>
<li>coupons（优惠券）</li>
</ol>
<h3 id="二、常用类简介"><a href="#二、常用类简介" class="headerlink" title="二、常用类简介"></a>二、常用类简介</h3><blockquote>
<h4 id="ControllerContext类（包含多个ThreadLocal）"><a href="#ControllerContext类（包含多个ThreadLocal）" class="headerlink" title="ControllerContext类（包含多个ThreadLocal）"></a>ControllerContext类（包含多个ThreadLocal）</h4></blockquote>
<ul>
<li>httpServletRequest</li>
<li>httpServletResponse</li>
<li>currentDomain</li>
<li>userId</li>
<li>userName</li>
<li>jdUserId</li>
<li>avatar 头像</li>
<li>tenantId 租户id</li>
<li>cookieEncryptKy</li>
<li>shopId</li>
<li>bridgetoken </li>
<li>fingerprint 指纹</li>
<li>staticDomain </li>
</ul>
<blockquote>
<h4 id="BaseResponseVo类-返回实体"><a href="#BaseResponseVo类-返回实体" class="headerlink" title="BaseResponseVo类(返回实体)"></a>BaseResponseVo类(返回实体)</h4></blockquote>
<ul>
<li>isSuccess</li>
<li>message</li>
<li>clientMessage</li>
<li>errorCode</li>
<li>data (泛型T)</li>
<li>errStrSet (Set类型)</li>
<li>pageInfo (PageInfo类型，用于分页：currentPage,pageSize,totalRecord,totalPage)</li>
<li>token</li>
</ul>
<h3 id="三、点按收藏的流程实例"><a href="#三、点按收藏的流程实例" class="headerlink" title="三、点按收藏的流程实例"></a>三、点按收藏的流程实例</h3><blockquote>
<h4 id="Controller-Service-Client-Controller-Service-DAO-Cache"><a href="#Controller-Service-Client-Controller-Service-DAO-Cache" class="headerlink" title="Controller-Service-Client-Controller-Service-DAO-Cache"></a>Controller-Service-Client-Controller-Service-DAO-Cache</h4></blockquote>
<ol>
<li>mall-web-Controller调用mall-web-Service中的方法</li>
<li>mall-web-Service调用item-service-Client中的方法</li>
<li>组装item-service中的FavoriteItemParam实体</li>
<li>通过favorClient调用addFavoriteItem，传入FavoriteItemParam</li>
<li>由Feign的Client进入item-service-Controller，调用item-service-Sercive中的addFavoriteItem方法</li>
<li>通过item-service-Service中注入的favoriteItemMapper进行DAO操作</li>
<li>cacheClient处理缓存,删除RedisKey</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.7-Spring Cloud学习]]></title>
      <url>/2017/06/07/6.7-Spring%20Cloud%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、Eureka"><a href="#一、Eureka" class="headerlink" title="一、Eureka"></a>一、Eureka</h3><p>微服务之间的互相调用，通过手动配置会显得非常复杂，所以需要一个统一的注册中心。</p>
<blockquote>
<p>服务注册与发现</p>
</blockquote>
<ul>
<li>服务单元向注册中心注册，注册中心维护一个服务清单，通过“心跳检测”来检查清单中的服务是否可用。</li>
<li>服务间调用通过向服务中心发起请求进行（服务端负载均衡）。</li>
</ul>
<blockquote>
<p>Eureka模块简介</p>
</blockquote>
<ul>
<li>Eureka服务端：服务注册中心，如果以集群模式部署，那么分片故障时会转入自我保护模式</li>
<li>高可用注册中心：将自己作为服务向其他中心注册自己（在registered-replicas项可以看到），形成互相注册的服务注册中心，实现服务清单的互相同步，以达到高可用的效果。客户端需要重新配置defaultZone加上两个注册中心。</li>
<li>Eureka客户端（提供者）：向注册中心注册自身提供的服务，并且周期性发送心跳来更新租约，也能够从服务端查询当前注册的服务信息缓存到本地，并更新服务状态。</li>
<li>服务消费者<ul>
<li>Rest+Ribbon：使用RestTemplate远程调用</li>
<li>Feign(自带断路器)</li>
</ul>
</li>
</ul>
<blockquote>
<p>具体功能实现</p>
</blockquote>
<ul>
<li>服务提供者<ul>
<li>服务注册：Server接收到服务提供者的REST请求后，用一个双层结构Map存储。第一层Key是服务名，第二层Key是具体服务实例名</li>
<li>服务同步：请求转发</li>
<li>服务续约：服务提供者维护一个心跳，可通过参数定义调用间隔时间和服务失效时间</li>
</ul>
</li>
<li>服务消费者<ul>
<li>获取服务清单：发送REST请求，需要保证eureka.client.fetch-registry=true</li>
<li>服务调用：Eureka中有Region和Zone的概念，一个Region包含多个Zone，每个客户端对应一个Region和一个Zone</li>
<li>服务下线：发送REST请求告知服务注册中心</li>
</ul>
</li>
<li>服务注册中心<ul>
<li>失效剔除：Server启动时就会创建相应的定时任务</li>
<li>自我保护：维护的实例不准确</li>
</ul>
</li>
</ul>
<blockquote>
<p>与Zookeeper的区别</p>
</blockquote>
<ul>
<li>Eureka强调了CAP原理中的AP，即可用性和可靠性</li>
<li>Zookeeper更加强调CP，即一致性和可靠性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[6.6-代码浏览]]></title>
      <url>/2017/06/06/6.6-%E4%BB%A3%E7%A0%81%E6%B5%8F%E8%A7%88/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="b2c-item-service代码学习"><a href="#b2c-item-service代码学习" class="headerlink" title="b2c-item-service代码学习"></a>b2c-item-service代码学习</h3></blockquote>
<h4 id="1-环境切换"><a href="#1-环境切换" class="headerlink" title="1. 环境切换"></a>1. 环境切换</h4><p>application-{profile}.properties中配置spring.profiles.active<br>mvn clean package -P dev时，<br>maven就知道profileActive=dev这个属性生效。</p>
<h4 id="2-Controller写法"><a href="#2-Controller写法" class="headerlink" title="2. Controller写法"></a>2. Controller写法</h4><ul>
<li>参数中的@RequestBody，表示Json格式字符串的参数</li>
<li>返回值为BaseResponseVo<t>使用了泛型</t></li>
<li>Domain全都以Vo结尾</li>
<li>CallerInfo的使用，Profiler.registerInfo(类名作为key，两个boolean，enableHeartbeat和enableTP)</li>
<li>BeanUtils.copyProperties进行JavaBean的Set和Get</li>
</ul>
<h4 id="3-Service写法"><a href="#3-Service写法" class="headerlink" title="3. Service写法"></a>3. Service写法</h4><ul>
<li>远程RPC调用开普勒接口</li>
</ul>
<h4 id="4-Criterion实现条件查询"><a href="#4-Criterion实现条件查询" class="headerlink" title="4. Criterion实现条件查询"></a>4. Criterion实现条件查询</h4>]]></content>
      
        <categories>
            
            <category> 实习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[App后台开发笔记]]></title>
      <url>/2017/03/01/App%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-关于API"><a href="#1-关于API" class="headerlink" title="1.关于API"></a>1.关于API</h2><ul>
<li>RESTful API设计，参见阮一峰的blog</li>
<li>根据对象来设计：比如“对象名称/操作名称”，如“user/delete”</li>
<li>返回正确值和空值的类型保持一致（不要各种null）</li>
</ul>
<h2 id="2-用户登录"><a href="#2-用户登录" class="headerlink" title="2.用户登录"></a>2.用户登录</h2><blockquote>
<p>简单方法</p>
</blockquote>
<ol>
<li>APP后台接收到用户名和密码，验证正确后生成一串token，在Redis中建立token字符串和用户信息的对应关系</li>
<li>后台将token传回</li>
<li>需要验证用户身份的操作必须传回token（token字符串附加在URL上）</li>
<li>退出登录时，后台将该用户对应的token删除</li>
</ol>
<blockquote>
<p>安全性修改</p>
</blockquote>
<ol>
<li>Redis中建立token字符串和用户id的对应关系</li>
<li>API请求不直接附加token字符串，而是附加原“URL+token”的md5值作为签名，同时附加用户id而后再传</li>
</ol>
<blockquote>
<p>防止攻击者重放</p>
</blockquote>
<ol>
<li>加入时间戳</li>
<li>客户端和服务端进行时间校准</li>
</ol>
<blockquote>
<p>更进一步</p>
</blockquote>
<ol>
<li>使用自定义通信协议</li>
<li>使用加密算法</li>
<li>支付密码永远不在APP端保存</li>
</ol>
<h2 id="3-数据更新"><a href="#3-数据更新" class="headerlink" title="3.数据更新"></a>3.数据更新</h2><ol>
<li>轮询（典型的”拉“），每隔一段时间向App后台发送请求</li>
<li>服务端推送，客户端接收消息后再拉取</li>
<li>使用”updateTime“增量更新，设置since（从何时开始）和latest（想要取得的最新时间），取得两者之间服务器端更新的内容。</li>
<li>（增量更新中的删除）在后台把需要删除内容的updateTime更新到最新，设置delete字段为1，则APP本地获取后，就进行删除。</li>
</ol>
<h2 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4.数据库"></a>4.数据库</h2><blockquote>
<p>MySQL的两种引擎：InnoDB和MyISAM</p>
</blockquote>
<p>InnoDB支持行锁和外键，事务安全<br>MyISAM支持表锁，不支持外键，事务不安全</p>
<blockquote>
<p>索引</p>
</blockquote>
<ul>
<li>给合适的列简历索引</li>
<li>索引列的值尽可能不同</li>
<li>使用短索引（字符类型指定长度）</li>
<li>利用最左前缀</li>
</ul>
<blockquote>
<p>优化建议</p>
</blockquote>
<ol>
<li>避免使用select * （传输量过大，耗费时间）</li>
<li>字段设置为NOT NULL（除非需要严格区分未填和空）</li>
<li>缓存（系统缓存、MySQL缓存和Redis应用缓存）</li>
<li>分库分表（详见李智慧《大型网站技术架构核心原理与案例分析》）</li>
<li>分析慢查询记录</li>
</ol>
<h2 id="5-Redis"><a href="#5-Redis" class="headerlink" title="5.Redis"></a>5.Redis</h2><ul>
<li>全部数据操作在内存，保证了高速</li>
<li>提供了丰富多样的数据类型</li>
<li>AOF和RDB两种数据持久化方式</li>
<li>所有操作都是原子性</li>
</ul>
<blockquote>
<p>数据类型</p>
</blockquote>
<ol>
<li>String：比较灵活（缓存商品分类等）</li>
<li>hash：类似数据库，存储对象的数据（根据id获取信息等）</li>
<li>list：按照插入顺序排序的字符串列表（消息队列、发送短信等）</li>
<li>set：无序且不重复的集合（共同好友等）</li>
<li>sorted list：有序且不重复</li>
</ol>
]]></content>
      
        <categories>
            
            <category> APP后台 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（装饰者模式、单例模式）]]></title>
      <url>/2017/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><blockquote>
<p>我就是我，“装饰”后颜色不一样的烟火。</p>
</blockquote>
<ul>
<li>定义：动态地将责任附加到对象上，若要扩展功能，装饰着提供了比继承更有弹性的方案</li>
<li>实际操作：定义抽象组件，继承了抽象组件的抽象装饰者，和相应的实际组件和实际装饰者，将组件对象作为参数放入装饰者类中，得到一个装饰过的对象</li>
<li>实际应用：Java I/O</li>
</ul>
<p>例如：<br>抽象组件InputStream<br>具体组件：FileInputStream、StringBufferInputStream、ByteArrayInputStream<br>抽象装饰者：FilterInputStream<br>具体装饰者：BufferedInputStream、LineNumberInputStream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 装饰者模式 </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Beverage beverage = <span class="keyword">new</span> Espresso();</div><div class="line">		System.out.println(beverage.getDescription() + <span class="string">"$"</span> + beverage.cost());</div><div class="line">		beverage = <span class="keyword">new</span> Mocha(beverage);</div><div class="line">		System.out.println(beverage.getDescription() + <span class="string">"$"</span> + beverage.cost());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//抽象组件</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	String description = <span class="string">"Unknown Beverage"</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> description;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//抽象装饰者（必须扩展自Beverage类）</span></div><div class="line"><span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="comment">//重新实现getDescription</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//具体组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</div><div class="line">		description = <span class="string">"Espresso"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1.99</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//具体装饰者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">	Beverage beverage;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.beverage = beverage;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getDescription() + <span class="string">",Mocha"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> .<span class="number">20</span> + beverage.cost();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>无论何时出生，总是天下“无双”。</p>
</blockquote>
<ul>
<li>定义：确保一个类只有一个实例，并且提供一个全局访问点。</li>
<li>实际操作：根据是否一开始就生成实例分为“懒汉”和“饿汉”方式，此外出于多线程的考虑需要加上双重校验锁，或者使用内部类实现</li>
<li>实际应用：线程池、缓存、日志、驱动等</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//饿汉模式</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon_eager</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingleTon_eager instance = <span class="keyword">new</span> SingleTon_eager();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleTon_eager</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon_eager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//懒汉模式(多线程,双重锁)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon_Lazy_Threads</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>  <span class="keyword">volatile</span> <span class="keyword">static</span> SingleTon_Lazy_Threads instance;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleTon_Lazy_Threads</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon_Lazy_Threads <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span> (SingleTon_Lazy_Threads.class) &#123;</div><div class="line">				<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">					instance = <span class="keyword">new</span> SingleTon_Lazy_Threads();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//(懒汉模式,内部类)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon_Lazy_Threads_Best</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonHolder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> SingleTon_Lazy_Threads_Best instance = <span class="keyword">new</span> SingleTon_Lazy_Threads_Best();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleTon_Lazy_Threads_Best</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon_Lazy_Threads_Best <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> SingleTonHolder.instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式（策略模式、观察者模式）]]></title>
      <url>/2017/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E3%80%81%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote>
<p>“叶子”有很多种，对“根”的情意不变。</p>
</blockquote>
<ul>
<li>每个子类中该方法都相同——方法实现放在基类中</li>
<li>每个子类的该方法都不同——方法改写为抽象方法，在各个子类中实现</li>
<li>每个子类的该方法有的相同有的不同——策略模式</li>
<li>定义：“策略模式”定义了算法族，使算法变化独立于客户。</li>
<li>实际操作：针对接口编程的思想，在基类中声明接口，然后new成继承了该接口的类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 策略模式 </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//传入枝叶产生多样性</span></div><div class="line">		Man m = <span class="keyword">new</span> Man(<span class="keyword">new</span> SwordBehavior());</div><div class="line">		m.performUseWeapon();</div><div class="line">		Man n = <span class="keyword">new</span> Man(<span class="keyword">new</span> KnifeBehavior());</div><div class="line">		n.performUseWeapon();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WeaponBehavior</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">useWeapon</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//行为接口扩展(树根长成枝叶)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwordBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWeapon</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"用宝剑"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KnifeBehavior</span> <span class="keyword">implements</span> <span class="title">WeaponBehavior</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWeapon</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"用小刀"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//类中定义行为(树根)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> WeaponBehavior weaponBehavior;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">(WeaponBehavior w)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.weaponBehavior = w;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performUseWeapon</span><span class="params">()</span> </span>&#123;</div><div class="line">		weaponBehavior.useWeapon();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote>
<p>合适在一起聆听你，不合适就分开，不再联系。</p>
</blockquote>
<ul>
<li>定义：对象之间一对多依赖，当主对象发生改变时，它的所有依赖者都会收到通知并自动更新。（并且有推拉两种模式可选）<br>实际操作：Subject维护Observer的列表，并拥有遍历Observer发消息的功能。新建Observer对象时需要传入Subject对象以进行注册。<br>Java内置API：Observable类和Observer接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 观察者模式 </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	  <span class="comment">//Subject</span></div><div class="line">		WeatherData weatherData = <span class="keyword">new</span> WeatherData();</div><div class="line">		<span class="comment">//观察者</span></div><div class="line">		currentConditionDisplay c = <span class="keyword">new</span> currentConditionDisplay(weatherData);</div><div class="line">		weatherData.setMeasurements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> pressure;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">		setChanged();</div><div class="line">		notifyObservers(); <span class="comment">//没有传送数据对象,说明是拉</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.temperature = temperature;</div><div class="line">		<span class="keyword">this</span>.humidity = humidity;</div><div class="line">		<span class="keyword">this</span>.pressure = pressure;</div><div class="line">		<span class="comment">//设置change标志位</span></div><div class="line">		measurementChanged();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> temperature;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> humidity;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> pressure;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">currentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">	Observable observable;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> temperature;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> humidity;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">currentConditionDisplay</span><span class="params">(Observable o)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.observable = o;</div><div class="line">		<span class="comment">//构造方法中传入并注册</span></div><div class="line">		observable.addObserver(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</div><div class="line">			WeatherData weatherData = (WeatherData) o;</div><div class="line">			<span class="keyword">this</span>.temperature = weatherData.getTemperature();</div><div class="line">			<span class="keyword">this</span>.humidity = weatherData.getHumidity();</div><div class="line">			System.out.println(<span class="string">"temperature:"</span> + temperature + <span class="string">"   humidity:"</span> + humidity);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[FreeMarker模板引擎I]]></title>
      <url>/2017/02/22/FreeMarker%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EI/</url>
      <content type="html"><![CDATA[<h2 id="1-FreeMarker是什么？"><a href="#1-FreeMarker是什么？" class="headerlink" title="1.FreeMarker是什么？"></a>1.FreeMarker是什么？</h2><blockquote>
<p>数据模型+模板输出=HTML（输出）</p>
</blockquote>
<p>模板方便了从数据模型中取数据并且展示出来的过程。</p>
<h2 id="2-FreeMarker的取值（插值）"><a href="#2-FreeMarker的取值（插值）" class="headerlink" title="2.FreeMarker的取值（插值）"></a>2.FreeMarker的取值（插值）</h2><p>数据分为基本数据类型（Integer等），封装的对象类型（User类等）与集合类型（List、Map等）。</p>
<ul>
<li><p>常用的取值方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 对null、不存在对象的取值：```$&#123;val!&apos;我是默认值&apos;&#125;</div></pre></td></tr></table></figure></p>
</li>
<li><p>取包装对象的值：使用点语法，如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* Date类型格式：```$&#123;date?String(&apos;yyyy-MM-dd&apos;)&#125;</div></pre></td></tr></table></figure></p>
</li>
<li><p>转义HTML内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注：</div><div class="line">1.boolean型一般转为yes/no: ```$&#123;val?string(&apos;yes&apos;,&apos;no&apos;)&#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<p>或者在配置文件中声明<br><figure class="highlight plain"><figcaption><span>key="boolean_format">’true,false```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2.取包装对象值时，用括号括起来加上！避免空值报错</div><div class="line"></div><div class="line">## 3.FreeMarker集合遍历</div><div class="line">List遍历:</div></pre></td></tr></table></figure></p>
<p>&lt;#list mylist as item&gt;<br>    ${item}<br><br>&lt;/#list&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map遍历:</div></pre></td></tr></table></figure></p>
<p>&lt;#list mymap?keys as key&gt;<br>    ${key}:${mymap[key]}<br><br>&lt;/#list&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## 4.FreeMarker逻辑判断</div><div class="line">判断是否存在：```&lt;#if mylist??&gt;``` 或将第二个？改成exists</div><div class="line">条件分支：```&lt;#elseif&gt;</div></pre></td></tr></table></figure></p>
<p>多条件时：与java语法相同<br>switch语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;#switch var&gt;</div><div class="line">  &lt;case 10&gt; </div><div class="line">    10&lt;/br&gt;</div><div class="line">    &lt;#break&gt;</div><div class="line">  &lt;#default&gt; </div><div class="line">    other&lt;/br&gt;</div><div class="line">&lt;/#switch&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 视图模板 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freemarker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FreeMarker模板引擎II]]></title>
      <url>/2017/02/22/FreeMarker%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EII/</url>
      <content type="html"><![CDATA[<h2 id="1-FreeMarker的方法调用"><a href="#1-FreeMarker的方法调用" class="headerlink" title="1.FreeMarker的方法调用"></a>1.FreeMarker的方法调用</h2><ul>
<li>方法一般都写成小写形式</li>
<li>调用方法使用？而不是.</li>
<li>若方法不需要参数，则不需要加（）</li>
<li>使用下划线而非驼峰命名法，如字符串的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 2.自定义函数</div><div class="line">以下是一个自定义的排序函数，调用了TemplateMethodModelEx接口，复写了exec方法。</div><div class="line">```java</div><div class="line">public class SortMethod implements TemplateMethodModelEx &#123;</div><div class="line">	@Override</div><div class="line">	public Object exec(List list) throws TemplateModelException &#123;</div><div class="line">		SimpleSequence arg0 = (SimpleSequence) list.get(0);</div><div class="line">		List&lt;BigDecimal&gt; list1 = arg0.toList();</div><div class="line">		Collections.sort(list1, new Comparator&lt;BigDecimal&gt;() &#123;</div><div class="line">			@Override</div><div class="line">			public int compare(BigDecimal o1, BigDecimal o2) &#123;</div><div class="line">				return o1.intValue() - o2.intValue();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		return list1;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-FreeMarker常用内建函数"><a href="#3-FreeMarker常用内建函数" class="headerlink" title="3.FreeMarker常用内建函数"></a>3.FreeMarker常用内建函数</h2><figure class="highlight plain"><figcaption><span>排序得到的序号为```$&#123;item_index&#125;```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">处理字符串的内建函数：</div><div class="line">* ```substring、cap_first、end_with、contains</div></pre></td></tr></table></figure>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* ```starts_with、index_of、last_index_of、split、trim</div></pre></td></tr></table></figure>
</li>
</ul>
<p>处理List的内建函数：</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* ```size、reverse、sort、sort_by```（```list?sort``` 排序得到的序号为```$&#123;item_index&#125;```）</div><div class="line">* ```chunk``` 分组```$&#123;listVal1?chunk(4)?size&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>is函数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eval：执行代码</div><div class="line"></div><div class="line">## 4.macro指令</div><div class="line">宏是一个模板片段与变量相关联。你可以使用定义的指令，可以帮助你多次使用。</div><div class="line">```&lt;#macro greet&gt;</div><div class="line">    hello！</div><div class="line">&lt;/#macro&gt;</div></pre></td></tr></table></figure></p>
<p>上面这个macro不会打印任何东西，它只是创建一个宏变量。这里有个变量叫greet，在<code>&lt;#macro greet&gt;</code>和<code>&lt;/#macro&gt;</code>之间的内容叫宏定义体。如果想要使用这样一个macro，可以这样<code>&lt;@greet&gt;&lt;/@greet&gt;</code>,这个时候才真正使用这个macro.</p>
]]></content>
      
        <categories>
            
            <category> 视图模板 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freemarker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet的请求转发和重定向]]></title>
      <url>/2017/01/03/Servlet%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      <content type="html"><![CDATA[<h2 id="1-上一篇blog中的代码"><a href="#1-上一篇blog中的代码" class="headerlink" title="1.上一篇blog中的代码"></a>1.上一篇blog中的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">    <span class="keyword">int</span> id=Integer.parseInt(request.getParameter(<span class="string">"id"</span>));</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> problemservice().delProblemById(id)) &#123;</div><div class="line">    response.sendRedirect(<span class="string">"../success.jsp?state=delete"</span>);</div><div class="line">	&#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">		response.sendRedirect(<span class="string">"../modifyinfo.jsp"</span>);</div><div class="line">	&#125;</div><div class="line">    request.setAttribute(<span class="string">"name"</span>, bieming);</div><div class="line">    RequestDispatcher view = request.getRequestDispatcher(<span class="string">"result.jsp"</span>);</div><div class="line">    view.forward(request, response); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-RequestDispatcher：请求转发和请求包含"><a href="#2-RequestDispatcher：请求转发和请求包含" class="headerlink" title="2.RequestDispatcher：请求转发和请求包含"></a>2.RequestDispatcher：请求转发和请求包含</h2><p>getRequestDispatcher( )属于request的一个方法，上述代码中使用forward进行了请求转发，若是想要请求包含，则改为调用include即可。请求转发和请求包含的区别为：</p>
<ul>
<li>请求转发:由当前Servlet设置响应头(该Servlet的相应体并不会显示)，下一个Servlet既可设置响应头也可设置响应体。</li>
<li>请求包含:当前Servlet和下一个Servlet共同完成相应头和响应体。</li>
</ul>
<h2 id="3-与sendRedirect-重定向的区别"><a href="#3-与sendRedirect-重定向的区别" class="headerlink" title="3.与sendRedirect( )重定向的区别"></a>3.与sendRedirect( )重定向的区别</h2><ul>
<li>请求转发是一次请求一次响应，因为只发出一个请求所以效率高些，而重定向是两次请求两次响应。</li>
<li>请求转发地址栏不变化，而重定向会显示后一个请求的地址。</li>
<li>请求转发只能转发到本项目其他Servlet，而重定向不只能重定向到本项目的其它Servlet，还能定向到其它项目。</li>
<li>请求转发是服务器端行为，只需各处转发的Servlet路径，而重定向需要给出requestURI。</li>
<li>如果需要在下一个Servlet中获取request域中的数据，那么就必须使用请求转发</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JSP+Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从Servlet开始认识JavaWeb]]></title>
      <url>/2017/01/03/Servlet%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-Servlet需要容器——Tomcat等"><a href="#1-Servlet需要容器——Tomcat等" class="headerlink" title="1.Servlet需要容器——Tomcat等"></a>1.Servlet需要容器——Tomcat等</h2><ul>
<li>通信支持：轻松让servlet与Web服务器对话</li>
<li>生命周期管理：控制servlet的实例化、初始化、生与死</li>
<li>多线程支持：自动为每个servlet请求创建新的java线程</li>
<li>声明方式实现安全：使用XML描述文件配置和修改安全性</li>
<li>JSP支持：将JSP翻译成JAVA</li>
</ul>
<h2 id="2-Servlet的作用"><a href="#2-Servlet的作用" class="headerlink" title="2.Servlet的作用"></a>2.Servlet的作用</h2><ul>
<li>接受请求</li>
<li>处理请求</li>
<li>完成响应</li>
</ul>
<h2 id="3-实现Servlet的方式"><a href="#3-实现Servlet的方式" class="headerlink" title="3.实现Servlet的方式"></a>3.实现Servlet的方式</h2><ul>
<li>实现javax.servlet.Servlet接口;</li>
<li>继承javax.servlet.GenericServlet类;</li>
<li>继承javax.servlet.http.HttpServlet类;</li>
</ul>
<p>一般以继承HttpServlet类为主。以下是Servlet接口源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig paramServletConfig)</span></span></div><div class="line">			<span class="keyword">throws</span> javax.servlet.ServletException;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest paramServletRequest, ServletResponse paramServletResponse)</span></span></div><div class="line">			<span class="keyword">throws</span> javax.servlet.ServletException, IOException;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-生命周期中的函数含义"><a href="#4-生命周期中的函数含义" class="headerlink" title="4.生命周期中的函数含义"></a>4.生命周期中的函数含义</h2><ul>
<li>Init( )：一生调用一次，可能有初始化代码（获得数据库连接等），此时覆写</li>
<li>service( )：在service( )中处理用户请求，覆盖其中的doPost( )或者doGet( )，每次有客户请求容器就开启一个线程，生成请求和响应</li>
<li>destory( )</li>
<li>ServletConfig:每个servlet拥有一个；用于向servlet传递部署信息；用于访问ServletContext；参数在部署描述文件中配置</li>
<li>ServletContext:每个web应用拥有一个；用于访问web应用参数；相当于公告栏；得到服务器信息</li>
</ul>
<h2 id="5-Servlet中的三个域（在Jsp中多出一个pageContext域）"><a href="#5-Servlet中的三个域（在Jsp中多出一个pageContext域）" class="headerlink" title="5.Servlet中的三个域（在Jsp中多出一个pageContext域）"></a>5.Servlet中的三个域（在Jsp中多出一个pageContext域）</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>在Servlet中直接用，因为实现的doPost()方法中有request这个参数。</p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>通过HttpSession session=request.getSession();得到。</p>
<h3 id="application"><a href="#application" class="headerlink" title="application"></a>application</h3><p>通过ServletContext application=this.getServletContext();得到。</p>
<h2 id="6-HTTPServlet中doPost-方法的例子"><a href="#6-HTTPServlet中doPost-方法的例子" class="headerlink" title="6.HTTPServlet中doPost( )方法的例子"></a>6.HTTPServlet中doPost( )方法的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">    <span class="keyword">int</span> id=Integer.parseInt(request.getParameter(<span class="string">"id"</span>));</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> problemservice().delProblemById(id)) &#123;</div><div class="line">    response.sendRedirect(<span class="string">"../success.jsp?state=delete"</span>);</div><div class="line">	&#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">		response.sendRedirect(<span class="string">"../modifyinfo.jsp"</span>);</div><div class="line">	&#125;</div><div class="line">    request.setAttribute(<span class="string">"name"</span>, bieming);</div><div class="line">    RequestDispatcher view = request.getRequestDispatcher(<span class="string">"result.jsp"</span>);</div><div class="line">    view.forward(request, response); </div><div class="line">&#125;</div><div class="line"><span class="comment">//其中用到了sendRedirect和RequestDispatcher</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JSP+Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/12/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> hello </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
